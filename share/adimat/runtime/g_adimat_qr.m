% Generated by ADiMat 0.6.0-4867
% Copyright 2009-2013 Johannes Willkomm, Fachgebiet Scientific Computing,
% TU Darmstadt, 64289 Darmstadt, Germany
% Copyright 2001-2008 Andre Vehreschild, Institute for Scientific Computing,
% RWTH Aachen University, 52056 Aachen, Germany.
% Visit us on the web at http://www.adimat.de
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%
%                             DISCLAIMER
%
% ADiMat was prepared as part of an employment at the Institute
% for Scientific Computing, RWTH Aachen University, Germany and is
% provided AS IS. NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL
% REPUBLIC OF GERMANY NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY,
% EXPRESS OR IMPLIED, OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY
% FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY INFORMATION OR
% PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE WOULD NOT INFRINGE
% PRIVATELY OWNED RIGHTS.
%
% Global flags were:
% FORWARDMODE -- Apply the forward mode to the files.
% NOOPEROPTIM -- Do not use optimized operators. I.e.:
%		 g_a*b*g_c -/-> mtimes3(g_a, b, g_c)
% NOLOCALCSE  -- Do not use local common subexpression elimination when
%		 canonicalizing the code.
% NOGLOBALCSE -- Prevents the application of global common subexpression
%		 elimination after canonicalizing the code.
% NOPRESCALARFOLDING -- Switch off folding of scalar constants before
%		 augmentation.
% NOPOSTSCALARFOLDING -- Switch off folding of scalar constants after
%		 augmentation.
% NOCONSTFOLDMULT0 -- Switch off folding of product with one factor
%		 being zero: b*0=0.
% FUNCMODE    -- Inputfile is a function (This flag can not be set explicitly).
% NOTMPCLEAR  -- Suppress generation of clear g_* instructions.
% UNBOUND_ERROR	-- Stop with error if unbound identifiers found (default).
% VERBOSITYLEVEL=4
% AD_IVARS= A
% AD_DVARS= Q, R

function [g_Q, Q, g_R, R]= g_adimat_qr(g_A, A)
   [m, n]= size(A); 
   r= min(m, n); 
   Q= eye(m); 
   g_Q= g_zeros(size(Q));
   if m<= n&& isreal(A), tmp_adimat_qr_00001= r- 1; % Update detected: r= some_expression(r,...)
      r= tmp_adimat_qr_00001;
   end
   for k= 1: r
      tmp_adimat_qr_00000= k: m;
      g_tmp_A_00000= g_A(tmp_adimat_qr_00000, k);
      tmp_A_00000= A(tmp_adimat_qr_00000, k);
      [g_Pk, Pk]= g_mk_householder_elim_vec_lapack(g_tmp_A_00000, tmp_A_00000, m); 
      g_tmp_adimat_qr_00002= g_Q* Pk+ Q* g_Pk;
      tmp_adimat_qr_00002= Q* Pk; 
      % Update detected: Q= some_expression(Q,...)
      g_Q= g_tmp_adimat_qr_00002;
      Q= tmp_adimat_qr_00002;
      g_tmp_adimat_qr_00003= g_Pk' * A+ Pk' * g_A;
      tmp_adimat_qr_00003= Pk' * A; 
      % Update detected: A= some_expression(A,...)
      g_A= g_tmp_adimat_qr_00003;
      A= tmp_adimat_qr_00003;
   end
   g_R= call(@triu, g_A);
   R= triu(A); 
end

% $Id: adimat_qr.m 3925 2013-10-14 12:09:14Z willkomm $
