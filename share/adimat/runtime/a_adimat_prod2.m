% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_prod2.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_prod2.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: a_adimat_prod2, rec_adimat_prod2,
%  ret_adimat_prod2
%

function [a_a nr_z] = a_adimat_prod2(a, dim, a_z)
   sz = size(a);
   ind = repmat({':'}, [length(sz) 1]);
   adimat_push1(ind{dim});
   ind{dim} = 1;
   z = a(ind{:});
   tmpfra1_2 = sz(dim);
   for i=2 : tmpfra1_2
      adimat_push1(ind{dim});
      ind{dim} = i;
      adimat_push1(z);
      z = z .* a(ind{:});
   end
   adimat_push1(tmpfra1_2);
   nr_z = z;
   a_a = a_zeros1(a);
   if nargin < 3
      a_z = a_zeros1(z);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(2 : tmpfra1_2)
      z = adimat_pop1;
      a_a(ind{:}) = adimat_adjsum(a_a(ind{:}), z .* a_z);
      tmpsa1 = a_z;
      a_z = a_zeros1(z);
      a_z = adimat_adjsum(a_z, tmpsa1 .* a(ind{:}));
      ind{dim} = adimat_pop1;
   end
   a_a(ind{:}) = adimat_adjsum(a_a(ind{:}), a_z);
   ind{dim} = adimat_pop1;
end

function z = rec_adimat_prod2(a, dim)
   sz = size(a);
   ind = repmat({':'}, [length(sz) 1]);
   adimat_push1(ind{dim});
   ind{dim} = 1;
   z = a(ind{:});
   tmpfra1_2 = sz(dim);
   for i=2 : tmpfra1_2
      adimat_push1(ind{dim});
      ind{dim} = i;
      adimat_push1(z);
      z = z .* a(ind{:});
   end
   adimat_push(tmpfra1_2, sz, ind, z, a);
   if nargin > 1
      adimat_push1(dim);
   end
   adimat_push1(nargin);
end

function a_a = ret_adimat_prod2(a_z)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      dim = adimat_pop1;
   end
   [a z ind sz] = adimat_pop;
   a_a = a_zeros1(a);
   if nargin < 1
      a_z = a_zeros1(z);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(2 : tmpfra1_2)
      z = adimat_pop1;
      a_a(ind{:}) = adimat_adjsum(a_a(ind{:}), z .* a_z);
      tmpsa1 = a_z;
      a_z = a_zeros1(z);
      a_z = adimat_adjsum(a_z, tmpsa1 .* a(ind{:}));
      ind{dim} = adimat_pop1;
   end
   a_a(ind{:}) = adimat_adjsum(a_a(ind{:}), a_z);
   ind{dim} = adimat_pop1;
end
