% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=x
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_expm.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=x
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_expm.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: a_adimat_expm, rec_adimat_expm,
%  ret_adimat_expm, a_padeExpm, rec_padeExpm,
%  ret_padeExpm, padeExpm, a_lesserPadeExpm,
%  rec_lesserPadeExpm, ret_lesserPadeExpm, lesserPadeExpm
%

function [a_x nr_z] = a_adimat_expm(x, a_z)
   [z] = rec_padeExpm(x);
   nr_z = z;
   a_x = a_zeros1(x);
   if nargin < 2
      a_z = a_zeros1(z);
   end
   [tmpadjc1] = ret_padeExpm(a_z);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end

function z = rec_adimat_expm(x)
   [z] = rec_padeExpm(x);
   adimat_push(z, x);
end

function a_x = ret_adimat_expm(a_z)
   [x z] = adimat_pop;
   a_x = a_zeros1(x);
   if nargin < 1
      a_z = a_zeros1(z);
   end
   [tmpadjc1] = ret_padeExpm(a_z);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end

function [a_A nr_R] = a_padeExpm(A, a_R)
   global adimat_expm_fast;
   tmpirs1 = 0;
   tmpda1 = 0;
   tmpca3 = 0;
   tmpca2 = 0;
   tmpca1 = 0;
   tmpda6 = 0;
   tmpda5 = 0;
   tmpca4 = 0;
   tmpii1 = 0;
   tmpir1 = 0;
   tmpdummy = 0;
   tmpirs1 = 0;
   m = 0;
   U = 0;
   V = 0;
   s = 0;
   A2 = 0;
   A4 = 0;
   A6 = 0;
   W1 = 0;
   W2 = 0;
   Z1 = 0;
   Z2 = 0;
   W = 0;
   l = [2.11e-8 3.56e-4 1.08e-2 6.49e-2 2e-1 4.37e-1 7.83e-1 1.23 1.78 2.42 3.13 3.9 4.74 5.63 6.56 7.52 8.53 9.56 1.06e1 1.17e1];
   b = [64764752532480000 32382376266240000 7771770303897600 1187353796428800 129060195264000 10559470521600 670442572800 33522128640 1323241920 40840800 960960 16380 182 1];
   n1A = norm(A, 1);
   lesserM = false;
   tmpba1 = 0;
   if adimat_expm_fast
      tmpba1 = 1;
      adimat_push1(tmpir1);
      tmpir1 = [3 5 7 9];
      adimat_push(tmpdummy, tmpirs1);
      [tmpdummy tmpirs1] = size([3 5 7 9]);
      tmpfra1_2 = tmpirs1;
      adimat_push1(tmpii1);
      for tmpii1=1 : tmpfra1_2
         adimat_push1(m);
         m = tmpir1(:, tmpii1);
         tmpba2 = 0;
         if n1A < l(m)
            tmpba2 = 1;
            adimat_push(U, V);
            [U V] = rec_lesserPadeExpm(A, m, b);
            adimat_push1(s);
            s = 0;
            adimat_push1(lesserM);
            lesserM = true;
         end
         adimat_push1(tmpba2);
      end
      adimat_push1(tmpfra1_2);
   end
   adimat_push1(tmpba1);
   tmpba1 = 0;
   if ~lesserM
      tmpba1 = 1;
      adimat_push1(s);
      s = max(ceil(log2(n1A / l(13))), 0);
      adimat_push1(tmpda1);
      tmpda1 = 2 ^ s;
      adimat_push1(A);
      A = A ./ tmpda1;
      adimat_push1(A2);
      A2 = A * A;
      adimat_push1(A4);
      A4 = A2 * A2;
      adimat_push1(A6);
      A6 = A2 * A4;
      adimat_push1(tmpca3);
      tmpca3 = b(10) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(12) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(14) .* A6;
      adimat_push1(W1);
      W1 = tmpca1 + tmpca2 + tmpca3;
      adimat_push1(tmpda6);
      tmpda6 = size(A);
      adimat_push1(tmpda5);
      tmpda5 = eye(tmpda6);
      adimat_push1(tmpca4);
      tmpca4 = b(2) .* tmpda5;
      adimat_push1(tmpca3);
      tmpca3 = b(4) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(6) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(8) .* A6;
      adimat_push1(W2);
      W2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      adimat_push1(tmpca3);
      tmpca3 = b(9) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(11) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(13) .* A6;
      adimat_push1(Z1);
      Z1 = tmpca1 + tmpca2 + tmpca3;
      adimat_push1(tmpda6);
      tmpda6 = size(A);
      adimat_push1(tmpda5);
      tmpda5 = eye(tmpda6);
      adimat_push1(tmpca4);
      tmpca4 = b(1) .* tmpda5;
      adimat_push1(tmpca3);
      tmpca3 = b(3) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(5) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(7) .* A6;
      adimat_push1(Z2);
      Z2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      adimat_push1(tmpca1);
      tmpca1 = A6 * W1;
      adimat_push1(W);
      W = tmpca1 + W2;
      adimat_push1(U);
      U = A * W;
      adimat_push1(tmpca1);
      tmpca1 = A6 * Z1;
      adimat_push1(V);
      V = tmpca1 + Z2;
   end
   adimat_push(tmpba1, tmpca2);
   tmpca2 = U + V;
   adimat_push1(tmpca1);
   tmpca1 = -U + V;
   R = tmpca1 \ tmpca2;
   tmpfra1_2 = s;
   for i=1 : tmpfra1_2
      adimat_push1(R);
      R = R * R;
   end
   adimat_push1(tmpfra1_2);
   nr_R = R;
   [a_U a_V a_A2 a_A4 a_A6 a_W1 a_W2 a_Z1 a_Z2 a_W a_tmpca3 a_tmpca2 a_tmpca1 a_tmpca4 a_A] = a_zeros(U, V, A2, A4, A6, W1, W2, Z1, Z2, W, tmpca3, tmpca2, tmpca1, tmpca4, A);
   if nargin < 2
      a_R = a_zeros1(R);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(1 : tmpfra1_2)
      R = adimat_pop1;
      tmpsa1 = a_R;
      a_R = a_zeros1(R);
      a_R = adimat_adjsum(a_R, tmpsa1 * R.');
      a_R = adimat_adjsum(a_R, R.' * tmpsa1);
   end
   [tmpadjc1 tmpadjc2] = adimat_a_mldivide(tmpca1, tmpca2, a_R);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc2);
   tmpca1 = adimat_pop1;
   a_U = adimat_adjsum(a_U, -a_tmpca1);
   a_V = adimat_adjsum(a_V, a_tmpca1);
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_U = adimat_adjsum(a_U, a_tmpca2);
   a_V = adimat_adjsum(a_V, a_tmpca2);
   a_tmpca2 = a_zeros1(tmpca2);
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      V = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_V);
      a_Z2 = adimat_adjsum(a_Z2, a_V);
      a_V = a_zeros1(V);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, a_tmpca1 * Z1.');
      a_Z1 = adimat_adjsum(a_Z1, A6.' * a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      U = adimat_pop1;
      a_A = adimat_adjsum(a_A, a_U * W.');
      a_W = adimat_adjsum(a_W, A.' * a_U);
      a_U = a_zeros1(U);
      W = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_W);
      a_W2 = adimat_adjsum(a_W2, a_W);
      a_W = a_zeros1(W);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, a_tmpca1 * W1.');
      a_W1 = adimat_adjsum(a_W1, A6.' * a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      Z2 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_Z2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_Z2);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_Z2);
      a_tmpca4 = adimat_adjsum(a_tmpca4, a_Z2);
      a_Z2 = a_zeros1(Z2);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(7) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(5) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(3) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_tmpca4 = a_zeros1(tmpca4);
      [tmpda5 tmpda6 Z1] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_Z1);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_Z1);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_Z1);
      a_Z1 = a_zeros1(Z1);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(13) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(11) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(9) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      W2 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_W2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_W2);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_W2);
      a_tmpca4 = adimat_adjsum(a_tmpca4, a_W2);
      a_W2 = a_zeros1(W2);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(8) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(6) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(4) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_tmpca4 = a_zeros1(tmpca4);
      [tmpda5 tmpda6 W1] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_W1);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_W1);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_W1);
      a_W1 = a_zeros1(W1);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(14) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(12) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(10) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      A6 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, a_A6 * A4.');
      a_A4 = adimat_adjsum(a_A4, A2.' * a_A6);
      a_A6 = a_zeros1(A6);
      A4 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, a_A4 * A2.');
      a_A2 = adimat_adjsum(a_A2, A2.' * a_A4);
      a_A4 = a_zeros1(A4);
      A2 = adimat_pop1;
      a_A = adimat_adjsum(a_A, a_A2 * A.');
      a_A = adimat_adjsum(a_A, A.' * a_A2);
      a_A2 = a_zeros1(A2);
      A = adimat_pop1;
      tmpsa1 = a_A;
      a_A = a_zeros1(A);
      a_A = adimat_adjsum(a_A, tmpsa1 ./ tmpda1);
      [tmpda1 s] = adimat_pop;
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpfra1_2 = adimat_pop1;
      for tmpii1=fliplr(1 : tmpfra1_2)
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            [lesserM s] = adimat_pop;
            [tmpadjc1] = ret_lesserPadeExpm(a_U, a_V);
            [V U] = adimat_pop;
            a_A = adimat_adjsum(a_A, tmpadjc1);
            [a_V a_U] = a_zeros(V, U);
         end
         m = adimat_pop1;
      end
      [tmpii1 tmpirs1 tmpdummy tmpir1] = adimat_pop;
   end
end

function R = rec_padeExpm(A)
   global adimat_expm_fast;
   tmpirs1 = 0;
   tmpda1 = 0;
   tmpca3 = 0;
   tmpca2 = 0;
   tmpca1 = 0;
   tmpda6 = 0;
   tmpda5 = 0;
   tmpca4 = 0;
   tmpii1 = 0;
   tmpir1 = 0;
   tmpdummy = 0;
   tmpirs1 = 0;
   m = 0;
   U = 0;
   V = 0;
   s = 0;
   A2 = 0;
   A4 = 0;
   A6 = 0;
   W1 = 0;
   W2 = 0;
   Z1 = 0;
   Z2 = 0;
   W = 0;
   l = [2.11e-8 3.56e-4 1.08e-2 6.49e-2 2e-1 4.37e-1 7.83e-1 1.23 1.78 2.42 3.13 3.9 4.74 5.63 6.56 7.52 8.53 9.56 1.06e1 1.17e1];
   b = [64764752532480000 32382376266240000 7771770303897600 1187353796428800 129060195264000 10559470521600 670442572800 33522128640 1323241920 40840800 960960 16380 182 1];
   n1A = norm(A, 1);
   lesserM = false;
   tmpba1 = 0;
   if adimat_expm_fast
      tmpba1 = 1;
      adimat_push1(tmpir1);
      tmpir1 = [3 5 7 9];
      adimat_push(tmpdummy, tmpirs1);
      [tmpdummy tmpirs1] = size([3 5 7 9]);
      tmpfra1_2 = tmpirs1;
      adimat_push1(tmpii1);
      for tmpii1=1 : tmpfra1_2
         adimat_push1(m);
         m = tmpir1(:, tmpii1);
         tmpba2 = 0;
         if n1A < l(m)
            tmpba2 = 1;
            adimat_push(U, V);
            [U V] = rec_lesserPadeExpm(A, m, b);
            adimat_push1(s);
            s = 0;
            adimat_push1(lesserM);
            lesserM = true;
         end
         adimat_push1(tmpba2);
      end
      adimat_push1(tmpfra1_2);
   end
   adimat_push1(tmpba1);
   tmpba1 = 0;
   if ~lesserM
      tmpba1 = 1;
      adimat_push1(s);
      s = max(ceil(log2(n1A / l(13))), 0);
      adimat_push1(tmpda1);
      tmpda1 = 2 ^ s;
      adimat_push1(A);
      A = A ./ tmpda1;
      adimat_push1(A2);
      A2 = A * A;
      adimat_push1(A4);
      A4 = A2 * A2;
      adimat_push1(A6);
      A6 = A2 * A4;
      adimat_push1(tmpca3);
      tmpca3 = b(10) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(12) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(14) .* A6;
      adimat_push1(W1);
      W1 = tmpca1 + tmpca2 + tmpca3;
      adimat_push1(tmpda6);
      tmpda6 = size(A);
      adimat_push1(tmpda5);
      tmpda5 = eye(tmpda6);
      adimat_push1(tmpca4);
      tmpca4 = b(2) .* tmpda5;
      adimat_push1(tmpca3);
      tmpca3 = b(4) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(6) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(8) .* A6;
      adimat_push1(W2);
      W2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      adimat_push1(tmpca3);
      tmpca3 = b(9) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(11) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(13) .* A6;
      adimat_push1(Z1);
      Z1 = tmpca1 + tmpca2 + tmpca3;
      adimat_push1(tmpda6);
      tmpda6 = size(A);
      adimat_push1(tmpda5);
      tmpda5 = eye(tmpda6);
      adimat_push1(tmpca4);
      tmpca4 = b(1) .* tmpda5;
      adimat_push1(tmpca3);
      tmpca3 = b(3) .* A2;
      adimat_push1(tmpca2);
      tmpca2 = b(5) .* A4;
      adimat_push1(tmpca1);
      tmpca1 = b(7) .* A6;
      adimat_push1(Z2);
      Z2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      adimat_push1(tmpca1);
      tmpca1 = A6 * W1;
      adimat_push1(W);
      W = tmpca1 + W2;
      adimat_push1(U);
      U = A * W;
      adimat_push1(tmpca1);
      tmpca1 = A6 * Z1;
      adimat_push1(V);
      V = tmpca1 + Z2;
   end
   adimat_push(tmpba1, tmpca2);
   tmpca2 = U + V;
   adimat_push1(tmpca1);
   tmpca1 = -U + V;
   R = tmpca1 \ tmpca2;
   tmpfra1_2 = s;
   for i=1 : tmpfra1_2
      adimat_push1(R);
      R = R * R;
   end
   adimat_push(tmpfra1_2, tmpii1, tmpir1, tmpdummy, tmpirs1, m, U, V, s, A2, A4, A6, W1, W2, Z1, Z2, W, l, b, n1A, lesserM, tmpda1, tmpca3, tmpca2, tmpca1, tmpda6, tmpda5, tmpca4, R, A);
end

function a_A = ret_padeExpm(a_R)
   global adimat_expm_fast;
   [A R tmpca4 tmpda5 tmpda6 tmpca1 tmpca2 tmpca3 tmpda1 lesserM n1A b l W Z2 Z1 W2 W1 A6 A4 A2 s V U m tmpirs1 tmpdummy tmpir1 tmpii1] = adimat_pop;
   [a_U a_V a_A2 a_A4 a_A6 a_W1 a_W2 a_Z1 a_Z2 a_W a_tmpca3 a_tmpca2 a_tmpca1 a_tmpca4 a_A] = a_zeros(U, V, A2, A4, A6, W1, W2, Z1, Z2, W, tmpca3, tmpca2, tmpca1, tmpca4, A);
   if nargin < 1
      a_R = a_zeros1(R);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(1 : tmpfra1_2)
      R = adimat_pop1;
      tmpsa1 = a_R;
      a_R = a_zeros1(R);
      a_R = adimat_adjsum(a_R, tmpsa1 * R.');
      a_R = adimat_adjsum(a_R, R.' * tmpsa1);
   end
   [tmpadjc1 tmpadjc2] = adimat_a_mldivide(tmpca1, tmpca2, a_R);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc2);
   tmpca1 = adimat_pop1;
   a_U = adimat_adjsum(a_U, -a_tmpca1);
   a_V = adimat_adjsum(a_V, a_tmpca1);
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_U = adimat_adjsum(a_U, a_tmpca2);
   a_V = adimat_adjsum(a_V, a_tmpca2);
   a_tmpca2 = a_zeros1(tmpca2);
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      V = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_V);
      a_Z2 = adimat_adjsum(a_Z2, a_V);
      a_V = a_zeros1(V);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, a_tmpca1 * Z1.');
      a_Z1 = adimat_adjsum(a_Z1, A6.' * a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      U = adimat_pop1;
      a_A = adimat_adjsum(a_A, a_U * W.');
      a_W = adimat_adjsum(a_W, A.' * a_U);
      a_U = a_zeros1(U);
      W = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_W);
      a_W2 = adimat_adjsum(a_W2, a_W);
      a_W = a_zeros1(W);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, a_tmpca1 * W1.');
      a_W1 = adimat_adjsum(a_W1, A6.' * a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      Z2 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_Z2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_Z2);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_Z2);
      a_tmpca4 = adimat_adjsum(a_tmpca4, a_Z2);
      a_Z2 = a_zeros1(Z2);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(7) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(5) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(3) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_tmpca4 = a_zeros1(tmpca4);
      [tmpda5 tmpda6 Z1] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_Z1);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_Z1);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_Z1);
      a_Z1 = a_zeros1(Z1);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(13) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(11) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(9) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      W2 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_W2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_W2);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_W2);
      a_tmpca4 = adimat_adjsum(a_tmpca4, a_W2);
      a_W2 = a_zeros1(W2);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(8) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(6) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(4) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_tmpca4 = a_zeros1(tmpca4);
      [tmpda5 tmpda6 W1] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_W1);
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_W1);
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_W1);
      a_W1 = a_zeros1(W1);
      tmpca1 = adimat_pop1;
      a_A6 = adimat_adjsum(a_A6, b(14) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_A4 = adimat_adjsum(a_A4, b(12) .* a_tmpca2);
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, b(10) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      A6 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, a_A6 * A4.');
      a_A4 = adimat_adjsum(a_A4, A2.' * a_A6);
      a_A6 = a_zeros1(A6);
      A4 = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, a_A4 * A2.');
      a_A2 = adimat_adjsum(a_A2, A2.' * a_A4);
      a_A4 = a_zeros1(A4);
      A2 = adimat_pop1;
      a_A = adimat_adjsum(a_A, a_A2 * A.');
      a_A = adimat_adjsum(a_A, A.' * a_A2);
      a_A2 = a_zeros1(A2);
      A = adimat_pop1;
      tmpsa1 = a_A;
      a_A = a_zeros1(A);
      a_A = adimat_adjsum(a_A, tmpsa1 ./ tmpda1);
      [tmpda1 s] = adimat_pop;
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpfra1_2 = adimat_pop1;
      for tmpii1=fliplr(1 : tmpfra1_2)
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            [lesserM s] = adimat_pop;
            [tmpadjc1] = ret_lesserPadeExpm(a_U, a_V);
            [V U] = adimat_pop;
            a_A = adimat_adjsum(a_A, tmpadjc1);
            [a_V a_U] = a_zeros(V, U);
         end
         m = adimat_pop1;
      end
      [tmpii1 tmpirs1 tmpdummy tmpir1] = adimat_pop;
   end
end

function R = padeExpm(A)
   tmpirs1 = 0;
   tmpda1 = 0;
   tmpca3 = 0;
   tmpca2 = 0;
   tmpca1 = 0;
   tmpda6 = 0;
   tmpda5 = 0;
   tmpca4 = 0;
   tmpii1 = 0;
   tmpir1 = 0;
   tmpdummy = 0;
   tmpirs1 = 0;
   m = 0;
   U = 0;
   V = 0;
   s = 0;
   A2 = 0;
   A4 = 0;
   A6 = 0;
   W1 = 0;
   W2 = 0;
   Z1 = 0;
   Z2 = 0;
   W = 0;
   global adimat_expm_fast;
   l = [2.11e-8 3.56e-4 1.08e-2 6.49e-2 2e-1 4.37e-1 7.83e-1 1.23 1.78 2.42 3.13 3.9 4.74 5.63 6.56 7.52 8.53 9.56 1.06e1 1.17e1];
   b = [64764752532480000 32382376266240000 7771770303897600 1187353796428800 129060195264000 10559470521600 670442572800 33522128640 1323241920 40840800 960960 16380 182 1];
   n1A = norm(A, 1);
   lesserM = false;
   if adimat_expm_fast
      tmpir1 = [3 5 7 9];
      [tmpdummy tmpirs1] = size([3 5 7 9]);
      for tmpii1=1 : tmpirs1
         m = tmpir1(:, tmpii1);
         if n1A < l(m)
            [U V] = lesserPadeExpm(A, m, b);
            s = 0;
            lesserM = true;
         end
      end
   end
   if ~lesserM
      s = max(ceil(log2(n1A / l(13))), 0);
      tmpda1 = 2 ^ s;
      A = A ./ tmpda1;
      A2 = A * A;
      A4 = A2 * A2;
      A6 = A2 * A4;
      tmpca3 = b(10) .* A2;
      tmpca2 = b(12) .* A4;
      tmpca1 = b(14) .* A6;
      W1 = tmpca1 + tmpca2 + tmpca3;
      tmpda6 = size(A);
      tmpda5 = eye(tmpda6);
      tmpca4 = b(2) .* tmpda5;
      tmpca3 = b(4) .* A2;
      tmpca2 = b(6) .* A4;
      tmpca1 = b(8) .* A6;
      W2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      tmpca3 = b(9) .* A2;
      tmpca2 = b(11) .* A4;
      tmpca1 = b(13) .* A6;
      Z1 = tmpca1 + tmpca2 + tmpca3;
      tmpda6 = size(A);
      tmpda5 = eye(tmpda6);
      tmpca4 = b(1) .* tmpda5;
      tmpca3 = b(3) .* A2;
      tmpca2 = b(5) .* A4;
      tmpca1 = b(7) .* A6;
      Z2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      tmpca1 = A6 * W1;
      W = tmpca1 + W2;
      U = A * W;
      tmpca1 = A6 * Z1;
      V = tmpca1 + Z2;
   end
   tmpca2 = U + V;
   tmpca1 = -U + V;
   R = tmpca1 \ tmpca2;
   for i=1 : s
      R = R * R;
   end
end

function [a_A nr_U nr_V] = a_lesserPadeExpm(A, m, b, a_U, a_V)
   tmpda3 = 0;
   tmpca1 = 0;
   top = (m - 1) ./ 2;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   V = b(1) .* tmpda1;
   adimat_push1(tmpda2);
   tmpda2 = size(A);
   adimat_push1(tmpda1);
   tmpda1 = eye(tmpda2);
   U = b(2) .* tmpda1;
   A2 = A * A;
   X = A2;
   tmpfra1_2 = top;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda3);
      tmpda3 = 2 * k;
      adimat_push1(tmpda2);
      tmpda2 = tmpda3 + 1;
      adimat_push1(tmpca1);
      tmpca1 = b(tmpda2) .* X;
      adimat_push1(V);
      V = V + tmpca1;
      adimat_push1(tmpda3);
      tmpda3 = 2 * k;
      adimat_push1(tmpda2);
      tmpda2 = tmpda3 + 2;
      adimat_push1(tmpca1);
      tmpca1 = b(tmpda2) .* X;
      adimat_push1(U);
      U = U + tmpca1;
      adimat_push1(X);
      X = X * A2;
   end
   adimat_push(tmpfra1_2, U);
   U = A * U;
   nr_U = U;
   nr_V = V;
   [a_A2 a_X a_tmpca1 a_A] = a_zeros(A2, X, tmpca1, A);
   if nargin < 4
      a_U = a_zeros1(U);
   end
   if nargin < 5
      a_V = a_zeros1(V);
   end
   U = adimat_pop1;
   a_A = adimat_adjsum(a_A, a_U * U.');
   tmpsa1 = a_U;
   a_U = a_zeros1(U);
   a_U = adimat_adjsum(a_U, A.' * tmpsa1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      X = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, X.' * a_X);
      tmpsa1 = a_X;
      a_X = a_zeros1(X);
      a_X = adimat_adjsum(a_X, tmpsa1 * A2.');
      U = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_U);
      tmpsa1 = a_U;
      a_U = a_zeros1(U);
      a_U = adimat_adjsum(a_U, tmpsa1);
      tmpca1 = adimat_pop1;
      a_X = adimat_adjsum(a_X, b(tmpda2) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3 V] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_V);
      tmpsa1 = a_V;
      a_V = a_zeros1(V);
      a_V = adimat_adjsum(a_V, tmpsa1);
      tmpca1 = adimat_pop1;
      a_X = adimat_adjsum(a_X, b(tmpda2) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3] = adimat_pop;
   end
   a_A2 = adimat_adjsum(a_A2, a_X);
   a_A = adimat_adjsum(a_A, a_A2 * A.');
   a_A = adimat_adjsum(a_A, A.' * a_A2);
   [tmpda1 tmpda2] = adimat_pop;
end

function [U V] = rec_lesserPadeExpm(A, m, b)
   tmpda3 = 0;
   tmpca1 = 0;
   top = (m - 1) ./ 2;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   V = b(1) .* tmpda1;
   adimat_push1(tmpda2);
   tmpda2 = size(A);
   adimat_push1(tmpda1);
   tmpda1 = eye(tmpda2);
   U = b(2) .* tmpda1;
   A2 = A * A;
   X = A2;
   tmpfra1_2 = top;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda3);
      tmpda3 = 2 * k;
      adimat_push1(tmpda2);
      tmpda2 = tmpda3 + 1;
      adimat_push1(tmpca1);
      tmpca1 = b(tmpda2) .* X;
      adimat_push1(V);
      V = V + tmpca1;
      adimat_push1(tmpda3);
      tmpda3 = 2 * k;
      adimat_push1(tmpda2);
      tmpda2 = tmpda3 + 2;
      adimat_push1(tmpca1);
      tmpca1 = b(tmpda2) .* X;
      adimat_push1(U);
      U = U + tmpca1;
      adimat_push1(X);
      X = X * A2;
   end
   adimat_push(tmpfra1_2, U);
   U = A * U;
   adimat_push(top, tmpda2, tmpda1, A2, X, tmpda3, tmpca1, U, V, A);
   if nargin > 1
      adimat_push1(m);
   end
   if nargin > 2
      adimat_push1(b);
   end
   adimat_push1(nargin);
end

function a_A = ret_lesserPadeExpm(a_U, a_V)
   tmpnargin = adimat_pop1;
   if tmpnargin > 2
      b = adimat_pop1;
   end
   if tmpnargin > 1
      m = adimat_pop1;
   end
   [A V U tmpca1 tmpda3 X A2 tmpda1 tmpda2 top] = adimat_pop;
   [a_A2 a_X a_tmpca1 a_A] = a_zeros(A2, X, tmpca1, A);
   if nargin < 1
      a_U = a_zeros1(U);
   end
   if nargin < 2
      a_V = a_zeros1(V);
   end
   U = adimat_pop1;
   a_A = adimat_adjsum(a_A, a_U * U.');
   tmpsa1 = a_U;
   a_U = a_zeros1(U);
   a_U = adimat_adjsum(a_U, A.' * tmpsa1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      X = adimat_pop1;
      a_A2 = adimat_adjsum(a_A2, X.' * a_X);
      tmpsa1 = a_X;
      a_X = a_zeros1(X);
      a_X = adimat_adjsum(a_X, tmpsa1 * A2.');
      U = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_U);
      tmpsa1 = a_U;
      a_U = a_zeros1(U);
      a_U = adimat_adjsum(a_U, tmpsa1);
      tmpca1 = adimat_pop1;
      a_X = adimat_adjsum(a_X, b(tmpda2) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3 V] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_V);
      tmpsa1 = a_V;
      a_V = a_zeros1(V);
      a_V = adimat_adjsum(a_V, tmpsa1);
      tmpca1 = adimat_pop1;
      a_X = adimat_adjsum(a_X, b(tmpda2) .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3] = adimat_pop;
   end
   a_A2 = adimat_adjsum(a_A2, a_X);
   a_A = adimat_adjsum(a_A, a_A2 * A.');
   a_A = adimat_adjsum(a_A, A.' * a_A2);
   [tmpda1 tmpda2] = adimat_pop;
end
% $Id: adimat_expm.m 3673 2013-05-27 12:17:48Z willkomm $

function [U V] = lesserPadeExpm(A, m, b)
   tmpda3 = 0;
   tmpca1 = 0;
   top = (m - 1) ./ 2;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   V = b(1) .* tmpda1;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   U = b(2) .* tmpda1;
   A2 = A * A;
   X = A2;
   for k=1 : top
      tmpda3 = 2 * k;
      tmpda2 = tmpda3 + 1;
      tmpca1 = b(tmpda2) .* X;
      V = V + tmpca1;
      tmpda3 = 2 * k;
      tmpda2 = tmpda3 + 2;
      tmpca1 = b(tmpda2) .* X;
      U = U + tmpca1;
      X = X * A2;
   end
   U = A * U;
end
% $Id: adimat_expm.m 3673 2013-05-27 12:17:48Z willkomm $
