% function r = admOptions(mode, indeps, deps, flags)
%
%  This function generates a structure whos fields control several
%  aspects of the ADiMat differentiation functions. This structure can
%  by passed as the last argument to the functions admDiffFor,
%  admDiffVFor, admDiffRev, admDiffComplex, admDiffFD, and
%  admTransform. It is recognized by its member field admopts.
%
%  With no arguments, this function returns the default version of
%  this kind of struct. The function expects as arguments name-value
%  pairs in the form name1, value1, name2, value2, etc. which are used
%  to fille the structures components.
%
%  The following fields are defined:
%
%   - admopts: this field indicates that the structure is of the type
%   admOptions
%
%   - admDiffFunction: Used by admHessian. A handle to the unterlying
%   function to compute second order univariate Taylor coefficients
%   (when hessianStrategy = 't2for'), or first order derivatives (when
%   hessianStrategy = 'fd' or 'cv'). The following choices are available:
%
%     * hessianStrategy = 't2for'
%       + @admTaylorFor (default)
%       + @admDiffFor
%       + @admDiffFD
%     * hessianStrategy = 'fd'
%       + @admDiffRev (default)
%       + @admDiffFor
%       + @admDiffVFor
%       + @admDiffComplex
%       + @admDiffFD
%     * hessianStrategy = 'cv'
%       + @admDiffRev (default)
%       + @admDiffFor
%       + @admDiffVFor
%       + @admDiffFD
%
%   - checkDependencies: Set to zero to switch of dependency checking
%   to test whether source transform of the function has to be redone.
%
%   - clearFunctions: clear differentiated functions using clear
%   before running the toplevel differentiated function. This is
%   usefull when generating and running functions in rapid
%   successsion, e.g. when testing. admDiffRev does it by default, in
%   order to clear global adjoint variables.
%     - admDiffFor: if true, clear g_ functions
%     - admDiffRev: if > -1, clear toplevel a_ function
%
%   - complexStep: only used by admDiffComplex. The step size of the
%   complex variable method.
%
%   - coloringFunction: a name or handle to a coloring heuristic
%   function that can be used for compressing the Jacobian in sparsiy
%   exploitation. Sparsiy exploitation is activated by setting this
%   option field or the option field coloring or by passing the
%   coloring function instead of the seed matrix to the admDiff
%   functions. See also JPattern.
%
%   - coloring: a vector of "colors" that specify which
%   columns (FM) or rows (RM) of the seed matrix shall be
%   superimposed. See also JPattern.
%
%   - debug: show the command line of the transformation command.
%
%   - dependents: index vector indicating the result parameters of the
%   function which to differentiate. E.g. [1 2] means to differentiate
%   the first and second result parameter. If empty (default) this
%   differentiates the function w.r.t all parameters.
%
%   - derivClassName: Used by admDiffFor, admDiffRev. Specify the name
%   of the desired derivative class. If empty, use opt_derivclass or,
%   if the number of derivative directions is less or equal than
%   scalarModeSwitch, use scalar_directderivs. On Octave,
%   scalar_directderivs if the only choice and the default.
%
%   - derivOrder: vector of derivative orders to be computed. For each
%   entry in this vector a set of Taylor coefficients is
%   returned. admDiffFor can compute first and second order Taylor
%   coefficients, admDiffFD up to fourth order Taylor
%   coefficients. Default is 1.
%
%   - fdStep: Used only by admDiffFD. The step size of the finite
%   difference method. If empty, use eps .^ (1/(2 .^ derivOrder)).
%
%   - fdMode: used only by admDiffFD. The string 'forward' selects the
%   forward FD method, 'backward' selects the backward FD method,
%   'central' selects the central FD method.
%
%   - fdAccuracyOrder: used only by admDiffFD. For forward or backward
%   FDs, must be interger, for central FDs, must be an even interger.
%
%   - fdContractSteps: used only by admDiffFD. If true, scale step
%   length h by total number of steps, e.g. use h/2 in first order
%   central finite differences. Default is false.
%
%   - flags: string that is appended to the commandline flags of the
%   transformation command.
%
%   - forceTransform: Force transformation of the function. Set to 1
%   to always transform the file, set to -1 to never transform the
%   file, or 0 for automatic mode.
%
%   - functionEvaluation: only used by admDiffFD, when fdMethod ==
%   'central' and by admDiffComplex. If the original function should
%   be evaluated. With these methods that is not absolutely necessary,
%   but it is done by default.
%
%   - functionHandles: list of adgument indices which are function
%   handles.
%
%   - functionResults: only used by admDiffRev. A cell array of
%   instances of the function's results. If this field is empty the
%   original function is run first in order to determine the shape and
%   dimension of the function results. The actual values may be zero,
%   but the shape must be given. If this field is given, its length
%   overrides the value of field nargout.
%
%   - hessianStrategy: Type help admHessian for more information.
%
%   - independents: index vector indicating the parameters
%   w.r.t. which to differentiate the function. E.g. [1 2] means to
%   differentiate w.r.t. the first and second parameter. If empty
%   (default) this differentiates the function w.r.t all
%   parameters. This can also be used to reorder the columns of the
%   Jacobian, e.g. by specifying [2 1] the Jacobian will have first
%   the columns induced by the second function argument, then those
%   corresponding to the second.
%
%   - JPattern: the bit pattern of the Jacobian matrix. When
%   specifying option coloringFuntion, JPattern must also be given.
%
%   - mode: only used by admDiff, and admTransform. If this field is
%   not empty the string ['-' mode] is added to the transformation
%   command line.
%
%   - nargout: Specify that the number of function result parameters
%   of interest is smaller thatn the actual number of result
%   parameters. If this field is empty, the number of results is
%   determined by the function nargin applied on the function handle,
%   that is, all result parameters are used. If the field
%   functionResults is non-empty, this field is ignored.
%
%   - outfile: only used by admTransform, when field toolchain is
%   non-empty. The name of the output file.
%
%   - parameters: A structure generated by function
%   admTransformParameters. See there for more information on the
%   meaning of particular fields. For each field whose value is
%   changed from the default setting admTransform generates an option
%   of the form -s name=value on the commandline.
%
%   - reverseModeSwitch: only used by admDiff. If seedMatrix is 1,
%   then admDiffRev (reverse mode) is used when tnargout < tnargin *
%   reverseModeSwitch, where tnargout is the total number of
%   components in the function result parameters (see also fields
%   nargout and functionResults) and tnargin is the total number of
%   components in the function input parameters.
%
%   - seedRev: The adjoint seed matrix used by admHessian. Corresponds
%   to the third argument of admTaylorRev, but also applies to the
%   strategy t2for (see hessianStrategy). In that case the Hessians
%   are weighted summed explicitely in the end.
%
%   - stack: only used by admDiffRev. Name and configuration
%   options of the stack implementation to use. see admStackOptions
%   and adimat_setup_stack.
%
%   - toolchain: only used by admTransform. Select a different
%   toolchain, other than forward or reverse mode (see field
%   mode). Available toolchains are 'code-metrics', 'null',
%   'rename'. Field outfile sets the name of the output file.
%
%  The names of fields in the arguments of this function can be
%  abbreviated as follows:
%
%    - 'c'  -> 'derivClassName'
%    - 'd'  -> 'dependents'
%    - 'f'  -> 'flags'
%    - 'i'  -> 'independents'
%    - 'JP' -> 'JPattern'
%    - 'o'  -> 'derivOrder'
%    - 'p'  -> 'parameters'
%    - 'm'  -> 'mode'
%    - 's'  -> 'stack'
%    - 'T'  -> 'toolchain'
%
% see also admDiffFor, admDiffVFor, admDiffRev, admDiffComplex,
% admDiffFD, admTransform, admTransformParameters
%
% This file is part of the ADiMat runtime environment.
%
% Copyright 2010-2014 Johannes Willkomm, Institute for Scientific Computing
% Copyright 2001-2009 Andre Vehreschild, Institute for Scientific Computing
%                     RWTH Aachen University
function r = admOptions(varargin)
r = struct('JPattern', [
   ], ...
           'admDiffFunction', '', ...
           'admopts', 1, ...
           'admtransformProgram', '', ...
           'autopathchange', 1, ...
           'checkDependencies', 1, ...
           'checkResultSizes', 1, ...
           'checknargs', 1, ...
           'checkoptions', 1, ...
           'clearFunctions', 0, ...
           'coloring', [
   ], ...
           'coloringFunction', '', ...
           'coloringFunctionArgs', {{  }}, ...
           'coloringFunctionColorArgNum', 2, ...
           'complexStep', 1e-60, ...
           'debug', [
   ], ...
           'dependents', [
   ], ...
           'derivClassName', '', ...
           'derivClassType', '', ...
           'derivOrder', 1, ...
           'dontPlot', 0, ...
           'fdAccuracyOrder', struct('forward', 1, ...
          'backward', 1, ...
          'central', 2), ...
           'fdContractSteps', 0, ...
           'fdMode', 'central', ...
           'fdStep', [
   ], ...
           'flags', '', ...
           'forceTransform', 0, ...
           'functionEvaluation', 1, ...
           'functionHandles', [
   ], ...
           'functionResults', {{  }}, ...
           'hessianStrategy', '', ...
           'independents', [
   ], ...
           'jac_nzpattern', [
   ], ...
           'mode', '', ...
           'nargout', [
   ], ...
           'nochecks', 0, ...
           'outfile', '', ...
           'parameters', struct('admTransformParameters', 1, ...
          'gzerosfunction', 'g_', ...
          'gradprefix', 'g_', ...
          'hessprefix', 'h_', ...
          'funcprefix', 'g_', ...
          'exportcgvcg', '', ...
          'exportcgsimp', '', ...
          'exportcgtxt', '', ...
          'sndorderfwd', 0, ...
          'secondorderfwd', 0, ...
          'nocanonicalize', '', ...
          'noAD', 0, ...
          'noforwardvarresolv', 0, ...
          'nobuiltins', 0, ...
          'nolocalmfiles', 0, ...
          'nooperoptim', 0, ...
          'nolocalcse', 0, ...
          'noglobalcse', 0, ...
          'globalcse', 0, ...
          'noloopsaving', 0, ...
          'nooverwrtchk', 0, ...
          'noscalarfolding', 0, ...
          'noprescalarfolding', 0, ...
          'nopostscalarfolding', 0, ...
          'noconstfoldmult0', 0, ...
          'nonargsupport', 0, ...
          'notmpclear', 0, ...
          'nosigensure', 0, ...
          'diffifcond', 0, ...
          'noforwardvarsubs', 0, ...
          'nouservarforsubs', 0, ...
          'nobracketsopt', 0, ...
          'aZerosFunction', '', ...
          'activityAnalysis', '', ...
          'adimatFunctionPrefix', '', ...
          'adjointReductions', '', ...
          'adjointReshapes', '', ...
          'allowArrayGrowth', '', ...
          'avoidVarargFunctions', '', ...
          'commentChar', '', ...
          'commentSpacer', '', ...
          'commentStart', '', ...
          'fm', '', ...
          'fmmode', '', ...
          'forwardDerivFunctionPrefix', '', ...
          'forwardDerivVariablePrefix', '', ...
          'from', '', ...
          'indToSubsDeep', '', ...
          'indentUnit', '', ...
          'inputFileName', '', ...
          'noMissingAdjointArgs', '', ...
          'outputDirectory', '', ...
          'outputFilePath', '', ...
          'outputFilePrefix', '', ...
          'outputMode', '', ...
          'parallel', '', ...
          'parallelFunctionPrefix', '', ...
          'prefix', '', ...
          'printStackInfo', '', ...
          'recPrefix', '', ...
          'retPrefix', '', ...
          'revPrefix', '', ...
          'showBanner', '', ...
          'showDisclaimer', '', ...
          'showStepIds', '', ...
          'showStepParams', '', ...
          'showSteps', '', ...
          'sourceLineNumbers', '', ...
          'stackInfoFunction', '', ...
          'subsrefFunctionPrefix', '', ...
          'tmpMode', '', ...
          'tmpPrefix', '', ...
          'to', '', ...
          'useAdjsum', '', ...
          'usePushIndex', '', ...
          'useSubsasgn', '', ...
          'useSubsref', '', ...
          'wellBehaved', ''), ...
           'reverseModeSwitch', 0.5, ...
           'scalarModeSwitch', 12, ...
           'seedRev', 1, ...
           'stack', struct('admstackopts', 1, ...
          'aio_idle_time', [
   ], ...
          'aio_num', [
   ], ...
          'aio_threads', [
   ], ...
          'asyncIOType', '', ...
          'bufferSize', 1073741824, ...
          'dirName', '', ...
          'fileName', '', ...
          'infoStackName', '', ...
          'mpiFileInfo', struct(), ...
          'name', '', ...
          'numBuffers', 16, ...
          'odirect', [
   ], ...
          'prefetchBlocks', [
   ], ...
          'verbose', 1), ...
           't2formode', '', ...
           'taylorClassName', '', ...
           'toolchain', '');
  if mod(length(varargin), 2) ~= 0
    error('adimat:admOptions:invalidNumberOfArguments', ...
          'There must be an even number of arguments (%d given)', length(varargin));
  end
  for i=1:2:length(varargin)
    fname = varargin{i};
    if ~isa(fname, 'char')
      error('adimat:admOptions:invalid_argument', '%s', ...
            'The first and every second following argument must be of class char');
    end
    switch fname
     case {'i', 'independent'}
      fname = 'independents';
     case {'d', 'dependent'}
      fname = 'dependents';
     case {'f', 'flag'}
      fname = 'flags';
     case {'c', 'derivativeClass', 'derivClass', 'derivativeClassName'}
      fname = 'derivClassName';
     case {'T'}
      fname = 'toolchain';
     case {'o'}
      fname = 'derivOrder';
     case {'p'}
      fname = 'parameters';
     case {'JP'}
      fname = 'JPattern';
     case {'m'}
      fname = 'mode';
     case {'s'}
      fname = 'stack';
     case {'r'}
      fname = 'functionResults';
    end
    fvalue = varargin{i+1};
    r.(fname) = fvalue;
  end

  r = orderfields(r);
% $Id: admOptions_code.m 4590 2014-06-22 08:15:27Z willkomm $
