% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=r
%  - independents=x
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_norm1.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=r
%  - independents=x
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_norm1.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: a_adimat_norm1, rec_adimat_norm1,
%  ret_adimat_norm1, a_adimat_norm2, rec_adimat_norm2,
%  ret_adimat_norm2, a_adimat_svd, rec_adimat_svd,
%  ret_adimat_svd, a_adimat_onesided_jacobi, rec_adimat_onesided_jacobi,
%  ret_adimat_onesided_jacobi, a_adimat_arnoldi, rec_adimat_arnoldi,
%  ret_adimat_arnoldi, a_mk_givens, rec_mk_givens,
%  ret_mk_givens
%

function [a_x nr_r] = a_adimat_norm1(x, a_r)
   p = 2;
   r = rec_adimat_norm2(x, p);
   nr_r = r;
   a_x = a_zeros1(x);
   if nargin < 2
      a_r = a_zeros1(r);
   end
   [tmpadjc1] = ret_adimat_norm2(a_r);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end

function r = rec_adimat_norm1(x)
   p = 2;
   r = rec_adimat_norm2(x, p);
   adimat_push(p, r, x);
end

function a_x = ret_adimat_norm1(a_r)
   [x r p] = adimat_pop;
   a_x = a_zeros1(x);
   if nargin < 1
      a_r = a_zeros1(r);
   end
   [tmpadjc1] = ret_adimat_norm2(a_r);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end
% $Id: adimat_norm1.m 3738 2013-06-12 16:48:53Z willkomm $

function [a_x nr_r] = a_adimat_norm2(x, p, a_r)
% r = norm(x, p);
   tmpca3 = 0;
   tmpca2 = 0;
   tmpca1 = 0;
   tmpda3 = 0;
   r = 0;
   answer = 0;
   a = 0;
   sa2 = 0;
   s = 0;
   tmpba1 = 0;
   if ischar(p)
      tmpba1 = 1;
      tmpba2 = 0;
      if strcmp(lower(p), 'fro')
         tmpba2 = 1;
         adimat_push1(tmpca3);
         tmpca3 = conj(x(:));
         adimat_push1(tmpca2);
         tmpca2 = x(:) .* tmpca3;
         adimat_push1(tmpca1);
         tmpca1 = sum(tmpca2);
         adimat_push1(r);
         r = sqrt(tmpca1);
      else
         error('Only "fro" is a valid string for p-norm computation currently.');
      end
      adimat_push1(tmpba2);
   else
      tmpba2 = 0;
      if isvector(x)
         tmpba2 = 1;
         tmpba3 = 0;
         if isinf(p)
            tmpba3 = 1;
            tmpba4 = 0;
            if p > 0
               tmpba4 = 1;
               adimat_push1(tmpca1);
               tmpca1 = abs(x);
               adimat_push1(r);
               r = max(tmpca1);
            else
               adimat_push1(tmpca1);
               tmpca1 = abs(x);
               adimat_push1(r);
               r = min(tmpca1);
            end
            adimat_push1(tmpba4);
         else
            tmpba4 = 0;
            if isreal(x) && mod(p, 2)==0
               tmpba4 = 1;
               adimat_push1(answer);
               answer = admGetPref('pnormEven_p_useAbs');
               tmpba5 = 0;
               if strcmp(answer, 'yes')
                  tmpba5 = 1;
                  adimat_push1(a);
                  a = abs(x);
               else
                  adimat_push1(a);
                  a = x;
               end
               adimat_push1(tmpba5);
            else
               adimat_push1(a);
               a = abs(x);
            end
            adimat_push(tmpba4, tmpda3);
            tmpda3 = 1 / p;
            adimat_push1(tmpca2);
            tmpca2 = a .^ p;
            adimat_push1(tmpca1);
            tmpca1 = sum(tmpca2);
            adimat_push1(r);
            r = tmpca1 .^ tmpda3;
         end
         adimat_push1(tmpba3);
      elseif ismatrix(x)
         tmpba2 = 2;
         tmpba3 = 0;
         if isinf(p)
            tmpba3 = 1;
            adimat_push1(a);
            a = abs(x);
            adimat_push1(sa2);
            sa2 = sum(a, 2);
            adimat_push1(r);
            r = max(sa2);
         elseif p == 2
            tmpba3 = 2;
            tmpba4 = 0;
            if issparse(x)
               tmpba4 = 1;
               adimat_push1(x);
               x = full(x);
            end
            adimat_push1(tmpba4);
            tmpba4 = 0;
            if isreal(x)
               tmpba4 = 1;
               adimat_push1(s);
               s = svd(x);
            else
               adimat_push1(s);
               [s] = rec_adimat_svd(x);
            end
            adimat_push(tmpba4, r);
            r = max(s);
         elseif p == 1
            tmpba3 = 3;
            adimat_push1(a);
            a = abs(x);
            adimat_push1(sa2);
            sa2 = sum(a, 1);
            adimat_push1(r);
            r = max(sa2);
         else
            error('Derivatives of matrix-p-norm not implemented yet.');
         end
         adimat_push1(tmpba3);
      else
         error('Value is neither a matrix nor a vector!');
      end
      adimat_push1(tmpba2);
   end
   adimat_push1(tmpba1);
   nr_r = r;
   [a_a a_sa2 a_s a_tmpca3 a_tmpca2 a_tmpca1 a_x] = a_zeros(a, sa2, s, tmpca3, tmpca2, tmpca1, x);
   if nargin < 3
      a_r = a_zeros1(r);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         r = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_r./sqrt(tmpca1));
         a_r = a_zeros1(r);
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpca2 = adimat_pop1;
         a_x(:) = adimat_adjsum(a_x(:), a_tmpca2 .* tmpca3);
         a_tmpca3 = adimat_adjsum(a_tmpca3, x(:) .* a_tmpca2);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(:) = adimat_adjsum(a_x(:), call(@conj, a_tmpca3));
         a_tmpca3 = a_zeros1(tmpca3);
      else
         error('Only "fro" is a valid string for p-norm computation currently.');
      end
   else
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         tmpba3 = adimat_pop1;
         if tmpba3 == 1
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               r = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_max1(tmpca1, a_r));
               a_r = a_zeros1(r);
               tmpca1 = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_abs(a_tmpca1, x));
               a_tmpca1 = a_zeros1(tmpca1);
            else
               r = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_min1(tmpca1, a_r));
               a_r = a_zeros1(r);
               tmpca1 = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_abs(a_tmpca1, x));
               a_tmpca1 = a_zeros1(tmpca1);
            end
         else
            r = adimat_pop1;
            a_tmpca1 = adimat_adjsum(a_tmpca1, tmpda3 .* tmpca1.^(tmpda3 - 1) .* a_r);
            a_r = a_zeros1(r);
            tmpca1 = adimat_pop1;
            a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
            a_tmpca1 = a_zeros1(tmpca1);
            tmpca2 = adimat_pop1;
            a_a = adimat_adjsum(a_a, p .* a.^(p - 1) .* a_tmpca2);
            a_tmpca2 = a_zeros1(tmpca2);
            [tmpda3 tmpba4] = adimat_pop;
            if tmpba4 == 1
               tmpba5 = adimat_pop1;
               if tmpba5 == 1
                  a = adimat_pop1;
                  a_x = adimat_adjsum(a_x, a_abs(a_a, x));
                  a_a = a_zeros1(a);
               else
                  a = adimat_pop1;
                  a_x = adimat_adjsum(a_x, a_a);
                  a_a = a_zeros1(a);
               end
               answer = adimat_pop1;
            else
               a = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_abs(a_a, x));
               a_a = a_zeros1(a);
            end
         end
      elseif tmpba2 == 2
         tmpba3 = adimat_pop1;
         if tmpba3 == 1
            r = adimat_pop1;
            a_sa2 = adimat_adjsum(a_sa2, adimat_max1(sa2, a_r));
            a_r = a_zeros1(r);
            sa2 = adimat_pop1;
            a_a = adimat_adjsum(a_a, a_sum(a_sa2, a, 2));
            a_sa2 = a_zeros1(sa2);
            a = adimat_pop1;
            a_x = adimat_adjsum(a_x, a_abs(a_a, x));
            a_a = a_zeros1(a);
         elseif tmpba3 == 2
            r = adimat_pop1;
            a_s = adimat_adjsum(a_s, adimat_max1(s, a_r));
            a_r = a_zeros1(r);
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               s = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_svd_1(a_s, x));
               a_s = a_zeros1(s);
            else
               [tmpadjc1] = ret_adimat_svd(a_s);
               s = adimat_pop1;
               a_x = adimat_adjsum(a_x, tmpadjc1);
               a_s = a_zeros1(s);
            end
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               x = adimat_pop1;
               tmpsa1 = a_x;
               a_x = a_zeros1(x);
               a_x = adimat_adjsum(a_x, a_full(tmpsa1, x));
            end
         elseif tmpba3 == 3
            r = adimat_pop1;
            a_sa2 = adimat_adjsum(a_sa2, adimat_max1(sa2, a_r));
            a_r = a_zeros1(r);
            sa2 = adimat_pop1;
            a_a = adimat_adjsum(a_a, a_sum(a_sa2, a, 1));
            a_sa2 = a_zeros1(sa2);
            a = adimat_pop1;
            a_x = adimat_adjsum(a_x, a_abs(a_a, x));
            a_a = a_zeros1(a);
         else
            error('Derivatives of matrix-p-norm not implemented yet.');
         end
      else
         error('Value is neither a matrix nor a vector!');
      end
   end
end

function r = rec_adimat_norm2(x, p)
   tmpca3 = 0;
   tmpca2 = 0;
   tmpca1 = 0;
   tmpda3 = 0;
   r = 0;
   answer = 0;
   a = 0;
   sa2 = 0;
   s = 0;
   tmpba1 = 0;
   if ischar(p)
      tmpba1 = 1;
      tmpba2 = 0;
      if strcmp(lower(p), 'fro')
         tmpba2 = 1;
         adimat_push1(tmpca3);
         tmpca3 = conj(x(:));
         adimat_push1(tmpca2);
         tmpca2 = x(:) .* tmpca3;
         adimat_push1(tmpca1);
         tmpca1 = sum(tmpca2);
         adimat_push1(r);
         r = sqrt(tmpca1);
      else
         error('Only "fro" is a valid string for p-norm computation currently.');
      end
      adimat_push1(tmpba2);
   else
      tmpba2 = 0;
      if isvector(x)
         tmpba2 = 1;
         tmpba3 = 0;
         if isinf(p)
            tmpba3 = 1;
            tmpba4 = 0;
            if p > 0
               tmpba4 = 1;
               adimat_push1(tmpca1);
               tmpca1 = abs(x);
               adimat_push1(r);
               r = max(tmpca1);
            else
               adimat_push1(tmpca1);
               tmpca1 = abs(x);
               adimat_push1(r);
               r = min(tmpca1);
            end
            adimat_push1(tmpba4);
         else
            tmpba4 = 0;
            if isreal(x) && mod(p, 2)==0
               tmpba4 = 1;
               adimat_push1(answer);
               answer = admGetPref('pnormEven_p_useAbs');
               tmpba5 = 0;
               if strcmp(answer, 'yes')
                  tmpba5 = 1;
                  adimat_push1(a);
                  a = abs(x);
               else
                  adimat_push1(a);
                  a = x;
               end
               adimat_push1(tmpba5);
            else
               adimat_push1(a);
               a = abs(x);
            end
            adimat_push(tmpba4, tmpda3);
            tmpda3 = 1 / p;
            adimat_push1(tmpca2);
            tmpca2 = a .^ p;
            adimat_push1(tmpca1);
            tmpca1 = sum(tmpca2);
            adimat_push1(r);
            r = tmpca1 .^ tmpda3;
         end
         adimat_push1(tmpba3);
      elseif ismatrix(x)
         tmpba2 = 2;
         tmpba3 = 0;
         if isinf(p)
            tmpba3 = 1;
            adimat_push1(a);
            a = abs(x);
            adimat_push1(sa2);
            sa2 = sum(a, 2);
            adimat_push1(r);
            r = max(sa2);
         elseif p == 2
            tmpba3 = 2;
            tmpba4 = 0;
            if issparse(x)
               tmpba4 = 1;
               adimat_push1(x);
               x = full(x);
            end
            adimat_push1(tmpba4);
            tmpba4 = 0;
            if isreal(x)
               tmpba4 = 1;
               adimat_push1(s);
               s = svd(x);
            else
               adimat_push1(s);
               [s] = rec_adimat_svd(x);
            end
            adimat_push(tmpba4, r);
            r = max(s);
         elseif p == 1
            tmpba3 = 3;
            adimat_push1(a);
            a = abs(x);
            adimat_push1(sa2);
            sa2 = sum(a, 1);
            adimat_push1(r);
            r = max(sa2);
         else
            error('Derivatives of matrix-p-norm not implemented yet.');
         end
         adimat_push1(tmpba3);
      else
         error('Value is neither a matrix nor a vector!');
      end
      adimat_push1(tmpba2);
   end
   adimat_push(tmpba1, answer, a, sa2, s, tmpca3, tmpca2, tmpca1, tmpda3, r, x);
   if nargin > 1
      adimat_push1(p);
   end
   adimat_push1(nargin);
end

function a_x = ret_adimat_norm2(a_r)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      p = adimat_pop1;
   end
   [x r tmpda3 tmpca1 tmpca2 tmpca3 s sa2 a answer] = adimat_pop;
   [a_a a_sa2 a_s a_tmpca3 a_tmpca2 a_tmpca1 a_x] = a_zeros(a, sa2, s, tmpca3, tmpca2, tmpca1, x);
   if nargin < 1
      a_r = a_zeros1(r);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         r = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_r./sqrt(tmpca1));
         a_r = a_zeros1(r);
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpca2 = adimat_pop1;
         a_x(:) = adimat_adjsum(a_x(:), a_tmpca2 .* tmpca3);
         a_tmpca3 = adimat_adjsum(a_tmpca3, x(:) .* a_tmpca2);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(:) = adimat_adjsum(a_x(:), call(@conj, a_tmpca3));
         a_tmpca3 = a_zeros1(tmpca3);
      else
         error('Only "fro" is a valid string for p-norm computation currently.');
      end
   else
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         tmpba3 = adimat_pop1;
         if tmpba3 == 1
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               r = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_max1(tmpca1, a_r));
               a_r = a_zeros1(r);
               tmpca1 = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_abs(a_tmpca1, x));
               a_tmpca1 = a_zeros1(tmpca1);
            else
               r = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_min1(tmpca1, a_r));
               a_r = a_zeros1(r);
               tmpca1 = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_abs(a_tmpca1, x));
               a_tmpca1 = a_zeros1(tmpca1);
            end
         else
            r = adimat_pop1;
            a_tmpca1 = adimat_adjsum(a_tmpca1, tmpda3 .* tmpca1.^(tmpda3 - 1) .* a_r);
            a_r = a_zeros1(r);
            tmpca1 = adimat_pop1;
            a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
            a_tmpca1 = a_zeros1(tmpca1);
            tmpca2 = adimat_pop1;
            a_a = adimat_adjsum(a_a, p .* a.^(p - 1) .* a_tmpca2);
            a_tmpca2 = a_zeros1(tmpca2);
            [tmpda3 tmpba4] = adimat_pop;
            if tmpba4 == 1
               tmpba5 = adimat_pop1;
               if tmpba5 == 1
                  a = adimat_pop1;
                  a_x = adimat_adjsum(a_x, a_abs(a_a, x));
                  a_a = a_zeros1(a);
               else
                  a = adimat_pop1;
                  a_x = adimat_adjsum(a_x, a_a);
                  a_a = a_zeros1(a);
               end
               answer = adimat_pop1;
            else
               a = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_abs(a_a, x));
               a_a = a_zeros1(a);
            end
         end
      elseif tmpba2 == 2
         tmpba3 = adimat_pop1;
         if tmpba3 == 1
            r = adimat_pop1;
            a_sa2 = adimat_adjsum(a_sa2, adimat_max1(sa2, a_r));
            a_r = a_zeros1(r);
            sa2 = adimat_pop1;
            a_a = adimat_adjsum(a_a, a_sum(a_sa2, a, 2));
            a_sa2 = a_zeros1(sa2);
            a = adimat_pop1;
            a_x = adimat_adjsum(a_x, a_abs(a_a, x));
            a_a = a_zeros1(a);
         elseif tmpba3 == 2
            r = adimat_pop1;
            a_s = adimat_adjsum(a_s, adimat_max1(s, a_r));
            a_r = a_zeros1(r);
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               s = adimat_pop1;
               a_x = adimat_adjsum(a_x, a_svd_1(a_s, x));
               a_s = a_zeros1(s);
            else
               [tmpadjc1] = ret_adimat_svd(a_s);
               s = adimat_pop1;
               a_x = adimat_adjsum(a_x, tmpadjc1);
               a_s = a_zeros1(s);
            end
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               x = adimat_pop1;
               tmpsa1 = a_x;
               a_x = a_zeros1(x);
               a_x = adimat_adjsum(a_x, a_full(tmpsa1, x));
            end
         elseif tmpba3 == 3
            r = adimat_pop1;
            a_sa2 = adimat_adjsum(a_sa2, adimat_max1(sa2, a_r));
            a_r = a_zeros1(r);
            sa2 = adimat_pop1;
            a_a = adimat_adjsum(a_a, a_sum(a_sa2, a, 1));
            a_sa2 = a_zeros1(sa2);
            a = adimat_pop1;
            a_x = adimat_adjsum(a_x, a_abs(a_a, x));
            a_a = a_zeros1(a);
         else
            error('Derivatives of matrix-p-norm not implemented yet.');
         end
      else
         error('Value is neither a matrix nor a vector!');
      end
   end
end
% $Id: adimat_norm2.m 4281 2014-05-21 09:23:04Z willkomm $

function [a_A nr_U nr_S nr_V] = a_adimat_svd(A, a_U, a_S, a_V)
   tmplia1 = 0;
   tmpda3 = 0;
   tmpda2 = 0;
   tmpca1 = 0;
   tmpda1 = 0;
   i = 0;
   U = 0;
   S = 0;
   V = 0;
   tmp = 0;
   nA1 = 0;
   svals = 0;
   B = 0;
   nt = 0;
   neqz = 0;
   qualArnoldi = 0;
   count = 0;
   maxArnoldiTries = 0;
   rs = 0;
   Uprelim = 0;
   Q = 0;
   H = 0;
   qsvd = 0;
   [m n] = size(A);
   tmpba1 = 0;
   if m < n
      tmpba1 = 1;
      tmpba2 = 0;
      if nargout <= 1
         tmpba2 = 1;
         adimat_push1(U);
         U = rec_adimat_svd(A');
      else
         adimat_push(tmp, S, V);
         [tmp S V] = rec_adimat_svd(A');
         adimat_push1(U);
         U = V;
         adimat_push1(V);
         V = tmp;
         adimat_push1(S);
         S = S.';
      end
      adimat_push1(tmpba2);
   else
      adimat_push1(nA1);
      nA1 = norm(A, 'fro');
      tmpba2 = 0;
      if nargout > 1
         tmpba2 = 1;
         adimat_push(svals, B, V, nt);
         [svals B V nt] = rec_adimat_onesided_jacobi(A, nA1);
      else
         adimat_push1(svals);
         svals = rec_adimat_onesided_jacobi(A, nA1);
      end
      adimat_push(tmpba2, neqz);
      neqz = svals ~= 0;
      adimat_push1(tmplia1);
      tmplia1 = sqrt(svals(neqz));
      adimat_push1(svals(neqz));
      svals(neqz) = tmplia1;
      tmpba2 = 0;
      if nargout <= 1
         tmpba2 = 1;
         adimat_push1(U);
         U = svals;
      else
         adimat_push1(U);
         U = B;
         tmpfra1_2 = nt;
         adimat_push1(i);
         for i=1 : tmpfra1_2
            tmpba3 = 0;
            if svals(i)./(svals(1) + eps) > eps
               tmpba3 = 1;
               adimat_push1(tmplia1);
               tmplia1 = U(:, i) ./ svals(i);
               adimat_push1(U(:, i));
               U(:, i) = tmplia1;
            else
               adimat_push1(nt);
               nt = min(i - 1, nt);
            end
            adimat_push1(tmpba3);
         end
         adimat_push(tmpfra1_2, tmpda3);
         tmpda3 = m - n;
         adimat_push1(tmpda2);
         tmpda2 = zeros(tmpda3, n);
         adimat_push1(tmpca1);
         tmpca1 = diag(svals);
         adimat_push1(S);
         S = [tmpca1
               tmpda2];
         tmpba3 = 0;
         if nt == 0
            tmpba3 = 1;
            adimat_push1(U);
            U = eye(m);
         elseif m > nt
            tmpba3 = 2;
            adimat_push1(qualArnoldi);
            qualArnoldi = 1;
            adimat_push1(count);
            count = 1;
            adimat_push1(maxArnoldiTries);
            maxArnoldiTries = 20;
            adimat_push1(rs);
            rs = rand('state');
            rand('state', 1992);
            tmpla1 = 0;
            while qualArnoldi./nA1>eps.*10 && count<maxArnoldiTries
               tmpla1 = tmpla1 + 1;
               tmpba4 = 0;
               if count == 1
                  tmpba4 = 1;
                  adimat_push1(tmpda2);
                  tmpda2 = m - nt;
                  adimat_push1(tmpda1);
                  tmpda1 = eye(m, tmpda2);
                  adimat_push1(Uprelim);
                  Uprelim = [U(:, 1 : nt) tmpda1];
               else
                  adimat_push1(tmpda2);
                  tmpda2 = m - nt;
                  adimat_push1(tmpda1);
                  tmpda1 = rand(m, tmpda2);
                  adimat_push1(Uprelim);
                  Uprelim = [U(:, 1 : nt) tmpda1];
               end
               adimat_push(tmpba4, Q, H, qualArnoldi);
               [Q H qualArnoldi] = rec_adimat_arnoldi(Uprelim, m, U(:, 1 : nt));
               adimat_push1(count);
               count = count + 1;
            end
            adimat_push(tmpla1, U);
            U = Q;
            rand('state', rs);
            tmpba4 = 0;
            if count >= maxArnoldiTries
               tmpba4 = 1;
               error('adimat:svd_jacobi:too_many_base_tries', 'Too many tries (%d) to complete the left unitary base', count);
            end
            adimat_push1(tmpba4);
         end
         adimat_push(tmpba3, qsvd);
         qsvd = norm(S - U'*A*V, 1) ./ (norm(A, 1) + eps);
         assert(qsvd < eps(class(A)).*1000);
      end
      adimat_push1(tmpba2);
   end
   adimat_push1(tmpba1);
   nr_U = U;
   nr_S = S;
   nr_V = V;
   [a_tmp a_svals a_B a_Uprelim a_Q a_tmplia1 a_tmpca1 a_A] = a_zeros(tmp, svals, B, Uprelim, Q, tmplia1, tmpca1, A);
   if nargin < 2
      a_U = a_zeros1(U);
   end
   if nargin < 3
      a_S = a_zeros1(S);
   end
   if nargin < 4
      a_V = a_zeros1(V);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         [tmpadjc1] = ret_adimat_svd(a_U);
         U = adimat_pop1;
         a_A = adimat_adjsum(a_A, a_ctranspose(tmpadjc1, A));
         a_U = a_zeros1(U);
      else
         S = adimat_pop1;
         tmpsa1 = a_S;
         a_S = a_zeros1(S);
         a_S = adimat_adjsum(a_S, tmpsa1.');
         V = adimat_pop1;
         a_tmp = adimat_adjsum(a_tmp, a_V);
         a_V = a_zeros1(V);
         U = adimat_pop1;
         a_V = adimat_adjsum(a_V, a_U);
         a_U = a_zeros1(U);
         [tmpadjc1] = ret_adimat_svd(a_tmp, a_S, a_V);
         [V S tmp] = adimat_pop;
         a_A = adimat_adjsum(a_A, a_ctranspose(tmpadjc1, A));
         [a_V a_S a_tmp] = a_zeros(V, S, tmp);
      end
   else
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         U = adimat_pop1;
         a_svals = adimat_adjsum(a_svals, a_U);
         a_U = a_zeros1(U);
      else
         assert(qsvd < eps(class(A)).*1000);
         [qsvd tmpba3] = adimat_pop;
         if tmpba3 == 1
            U = adimat_pop1;
            a_U = a_zeros1(U);
         elseif tmpba3 == 2
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               error('adimat:svd_jacobi:too_many_base_tries', 'Too many tries (%d) to complete the left unitary base', count);
            end
            rand('state', rs);
            U = adimat_pop1;
            a_Q = adimat_adjsum(a_Q, a_U);
            a_U = a_zeros1(U);
            tmpla1 = adimat_pop1;
            while tmpla1 > 0
               tmpla1 = tmpla1 - 1;
               count = adimat_pop1;
               [tmpadjc1 tmpadjc3] = ret_adimat_arnoldi(a_Q);
               [qualArnoldi H Q] = adimat_pop;
               a_Uprelim = adimat_adjsum(a_Uprelim, tmpadjc1);
               a_U(:, 1 : nt) = adimat_adjsum(a_U(:, 1 : nt), tmpadjc3);
               a_Q = a_zeros1(Q);
               tmpba4 = adimat_pop1;
               if tmpba4 == 1
                  Uprelim = adimat_pop1;
                  a_U(:, 1 : nt) = adimat_adjsum(a_U(:, 1 : nt), a_horzcat(a_Uprelim, U(:, 1 : nt)));
                  a_Uprelim = a_zeros1(Uprelim);
                  [tmpda1 tmpda2] = adimat_pop;
               else
                  Uprelim = adimat_pop1;
                  a_U(:, 1 : nt) = adimat_adjsum(a_U(:, 1 : nt), a_horzcat(a_Uprelim, U(:, 1 : nt)));
                  a_Uprelim = a_zeros1(Uprelim);
                  [tmpda1 tmpda2] = adimat_pop;
               end
            end
            rand('state', 1992);
            [rs maxArnoldiTries count qualArnoldi] = adimat_pop;
         end
         S = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_S, tmpca1));
         a_S = a_zeros1(S);
         tmpca1 = adimat_pop1;
         a_svals = adimat_adjsum(a_svals, a_diag(a_tmpca1, svals));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpda2 tmpda3 tmpfra1_2] = adimat_pop;
         for i=fliplr(1 : tmpfra1_2)
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               U(:, i) = adimat_pop1;
               a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_U(:, i)));
               a_U(:, i) = a_zeros1(U(:, i));
               tmplia1 = adimat_pop1;
               a_U(:, i) = adimat_adjsum(a_U(:, i), a_tmplia1 ./ svals(i));
               a_svals(i) = adimat_adjsum(a_svals(i), -((U(:, i)./svals(i) .* a_tmplia1) ./ svals(i)));
               a_tmplia1 = a_zeros1(tmplia1);
            else
               nt = adimat_pop1;
            end
         end
         [i U] = adimat_pop;
         a_B = adimat_adjsum(a_B, a_U);
         a_U = a_zeros1(U);
      end
      svals(neqz) = adimat_pop1;
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_svals(neqz)));
      a_svals(neqz) = a_zeros1(svals(neqz));
      tmplia1 = adimat_pop1;
      a_svals(neqz) = adimat_adjsum(a_svals(neqz), 0.5 .* a_tmplia1./sqrt(svals(neqz)));
      a_tmplia1 = a_zeros1(tmplia1);
      [neqz tmpba2] = adimat_pop;
      if tmpba2 == 1
         [tmpadjc1] = ret_adimat_onesided_jacobi(a_svals, a_B, a_V);
         [nt V B svals] = adimat_pop;
         a_A = adimat_adjsum(a_A, tmpadjc1);
         [a_V a_B a_svals] = a_zeros(V, B, svals);
      else
         [tmpadjc1] = ret_adimat_onesided_jacobi(a_svals);
         svals = adimat_pop1;
         a_A = adimat_adjsum(a_A, tmpadjc1);
         a_svals = a_zeros1(svals);
      end
      nA1 = adimat_pop1;
   end
end

function [U S V] = rec_adimat_svd(A)
   tmplia1 = 0;
   tmpda3 = 0;
   tmpda2 = 0;
   tmpca1 = 0;
   tmpda1 = 0;
   i = 0;
   U = 0;
   S = 0;
   V = 0;
   tmp = 0;
   nA1 = 0;
   svals = 0;
   B = 0;
   nt = 0;
   neqz = 0;
   qualArnoldi = 0;
   count = 0;
   maxArnoldiTries = 0;
   rs = 0;
   Uprelim = 0;
   Q = 0;
   H = 0;
   qsvd = 0;
   [m n] = size(A);
   tmpba1 = 0;
   if m < n
      tmpba1 = 1;
      tmpba2 = 0;
      if nargout <= 1
         tmpba2 = 1;
         adimat_push1(U);
         U = rec_adimat_svd(A');
      else
         adimat_push(tmp, S, V);
         [tmp S V] = rec_adimat_svd(A');
         adimat_push1(U);
         U = V;
         adimat_push1(V);
         V = tmp;
         adimat_push1(S);
         S = S.';
      end
      adimat_push1(tmpba2);
   else
      adimat_push1(nA1);
      nA1 = norm(A, 'fro');
      tmpba2 = 0;
      if nargout > 1
         tmpba2 = 1;
         adimat_push(svals, B, V, nt);
         [svals B V nt] = rec_adimat_onesided_jacobi(A, nA1);
      else
         adimat_push1(svals);
         svals = rec_adimat_onesided_jacobi(A, nA1);
      end
      adimat_push(tmpba2, neqz);
      neqz = svals ~= 0;
      adimat_push1(tmplia1);
      tmplia1 = sqrt(svals(neqz));
      adimat_push1(svals(neqz));
      svals(neqz) = tmplia1;
      tmpba2 = 0;
      if nargout <= 1
         tmpba2 = 1;
         adimat_push1(U);
         U = svals;
      else
         adimat_push1(U);
         U = B;
         tmpfra1_2 = nt;
         adimat_push1(i);
         for i=1 : tmpfra1_2
            tmpba3 = 0;
            if svals(i)./(svals(1) + eps) > eps
               tmpba3 = 1;
               adimat_push1(tmplia1);
               tmplia1 = U(:, i) ./ svals(i);
               adimat_push1(U(:, i));
               U(:, i) = tmplia1;
            else
               adimat_push1(nt);
               nt = min(i - 1, nt);
            end
            adimat_push1(tmpba3);
         end
         adimat_push(tmpfra1_2, tmpda3);
         tmpda3 = m - n;
         adimat_push1(tmpda2);
         tmpda2 = zeros(tmpda3, n);
         adimat_push1(tmpca1);
         tmpca1 = diag(svals);
         adimat_push1(S);
         S = [tmpca1
               tmpda2];
         tmpba3 = 0;
         if nt == 0
            tmpba3 = 1;
            adimat_push1(U);
            U = eye(m);
         elseif m > nt
            tmpba3 = 2;
            adimat_push1(qualArnoldi);
            qualArnoldi = 1;
            adimat_push1(count);
            count = 1;
            adimat_push1(maxArnoldiTries);
            maxArnoldiTries = 20;
            adimat_push1(rs);
            rs = rand('state');
            rand('state', 1992);
            tmpla1 = 0;
            while qualArnoldi./nA1>eps.*10 && count<maxArnoldiTries
               tmpla1 = tmpla1 + 1;
               tmpba4 = 0;
               if count == 1
                  tmpba4 = 1;
                  adimat_push1(tmpda2);
                  tmpda2 = m - nt;
                  adimat_push1(tmpda1);
                  tmpda1 = eye(m, tmpda2);
                  adimat_push1(Uprelim);
                  Uprelim = [U(:, 1 : nt) tmpda1];
               else
                  adimat_push1(tmpda2);
                  tmpda2 = m - nt;
                  adimat_push1(tmpda1);
                  tmpda1 = rand(m, tmpda2);
                  adimat_push1(Uprelim);
                  Uprelim = [U(:, 1 : nt) tmpda1];
               end
               adimat_push(tmpba4, Q, H, qualArnoldi);
               [Q H qualArnoldi] = rec_adimat_arnoldi(Uprelim, m, U(:, 1 : nt));
               adimat_push1(count);
               count = count + 1;
            end
            adimat_push(tmpla1, U);
            U = Q;
            rand('state', rs);
            tmpba4 = 0;
            if count >= maxArnoldiTries
               tmpba4 = 1;
               error('adimat:svd_jacobi:too_many_base_tries', 'Too many tries (%d) to complete the left unitary base', count);
            end
            adimat_push1(tmpba4);
         end
         adimat_push(tmpba3, qsvd);
         qsvd = norm(S - U'*A*V, 1) ./ (norm(A, 1) + eps);
         assert(qsvd < eps(class(A)).*1000);
      end
      adimat_push1(tmpba2);
   end
   adimat_push(tmpba1, i, tmp, nA1, svals, B, nt, neqz, qualArnoldi, count, maxArnoldiTries, rs, Uprelim, Q, H, qsvd, m, n, tmplia1, tmpda3, tmpda2, tmpca1, tmpda1, U, S, V, A);
end

function a_A = ret_adimat_svd(a_U, a_S, a_V)
   [A V S U tmpda1 tmpca1 tmpda2 tmpda3 tmplia1 n m qsvd H Q Uprelim rs maxArnoldiTries count qualArnoldi neqz nt B svals nA1 tmp i] = adimat_pop;
   [a_tmp a_svals a_B a_Uprelim a_Q a_tmplia1 a_tmpca1 a_A] = a_zeros(tmp, svals, B, Uprelim, Q, tmplia1, tmpca1, A);
   if nargin < 1
      a_U = a_zeros1(U);
   end
   if nargin < 2
      a_S = a_zeros1(S);
   end
   if nargin < 3
      a_V = a_zeros1(V);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         [tmpadjc1] = ret_adimat_svd(a_U);
         U = adimat_pop1;
         a_A = adimat_adjsum(a_A, a_ctranspose(tmpadjc1, A));
         a_U = a_zeros1(U);
      else
         S = adimat_pop1;
         tmpsa1 = a_S;
         a_S = a_zeros1(S);
         a_S = adimat_adjsum(a_S, tmpsa1.');
         V = adimat_pop1;
         a_tmp = adimat_adjsum(a_tmp, a_V);
         a_V = a_zeros1(V);
         U = adimat_pop1;
         a_V = adimat_adjsum(a_V, a_U);
         a_U = a_zeros1(U);
         [tmpadjc1] = ret_adimat_svd(a_tmp, a_S, a_V);
         [V S tmp] = adimat_pop;
         a_A = adimat_adjsum(a_A, a_ctranspose(tmpadjc1, A));
         [a_V a_S a_tmp] = a_zeros(V, S, tmp);
      end
   else
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         U = adimat_pop1;
         a_svals = adimat_adjsum(a_svals, a_U);
         a_U = a_zeros1(U);
      else
         assert(qsvd < eps(class(A)).*1000);
         [qsvd tmpba3] = adimat_pop;
         if tmpba3 == 1
            U = adimat_pop1;
            a_U = a_zeros1(U);
         elseif tmpba3 == 2
            tmpba4 = adimat_pop1;
            if tmpba4 == 1
               error('adimat:svd_jacobi:too_many_base_tries', 'Too many tries (%d) to complete the left unitary base', count);
            end
            rand('state', rs);
            U = adimat_pop1;
            a_Q = adimat_adjsum(a_Q, a_U);
            a_U = a_zeros1(U);
            tmpla1 = adimat_pop1;
            while tmpla1 > 0
               tmpla1 = tmpla1 - 1;
               count = adimat_pop1;
               [tmpadjc1 tmpadjc3] = ret_adimat_arnoldi(a_Q);
               [qualArnoldi H Q] = adimat_pop;
               a_Uprelim = adimat_adjsum(a_Uprelim, tmpadjc1);
               a_U(:, 1 : nt) = adimat_adjsum(a_U(:, 1 : nt), tmpadjc3);
               a_Q = a_zeros1(Q);
               tmpba4 = adimat_pop1;
               if tmpba4 == 1
                  Uprelim = adimat_pop1;
                  a_U(:, 1 : nt) = adimat_adjsum(a_U(:, 1 : nt), a_horzcat(a_Uprelim, U(:, 1 : nt)));
                  a_Uprelim = a_zeros1(Uprelim);
                  [tmpda1 tmpda2] = adimat_pop;
               else
                  Uprelim = adimat_pop1;
                  a_U(:, 1 : nt) = adimat_adjsum(a_U(:, 1 : nt), a_horzcat(a_Uprelim, U(:, 1 : nt)));
                  a_Uprelim = a_zeros1(Uprelim);
                  [tmpda1 tmpda2] = adimat_pop;
               end
            end
            rand('state', 1992);
            [rs maxArnoldiTries count qualArnoldi] = adimat_pop;
         end
         S = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_S, tmpca1));
         a_S = a_zeros1(S);
         tmpca1 = adimat_pop1;
         a_svals = adimat_adjsum(a_svals, a_diag(a_tmpca1, svals));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpda2 tmpda3 tmpfra1_2] = adimat_pop;
         for i=fliplr(1 : tmpfra1_2)
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               U(:, i) = adimat_pop1;
               a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_U(:, i)));
               a_U(:, i) = a_zeros1(U(:, i));
               tmplia1 = adimat_pop1;
               a_U(:, i) = adimat_adjsum(a_U(:, i), a_tmplia1 ./ svals(i));
               a_svals(i) = adimat_adjsum(a_svals(i), -((U(:, i)./svals(i) .* a_tmplia1) ./ svals(i)));
               a_tmplia1 = a_zeros1(tmplia1);
            else
               nt = adimat_pop1;
            end
         end
         [i U] = adimat_pop;
         a_B = adimat_adjsum(a_B, a_U);
         a_U = a_zeros1(U);
      end
      svals(neqz) = adimat_pop1;
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_svals(neqz)));
      a_svals(neqz) = a_zeros1(svals(neqz));
      tmplia1 = adimat_pop1;
      a_svals(neqz) = adimat_adjsum(a_svals(neqz), 0.5 .* a_tmplia1./sqrt(svals(neqz)));
      a_tmplia1 = a_zeros1(tmplia1);
      [neqz tmpba2] = adimat_pop;
      if tmpba2 == 1
         [tmpadjc1] = ret_adimat_onesided_jacobi(a_svals, a_B, a_V);
         [nt V B svals] = adimat_pop;
         a_A = adimat_adjsum(a_A, tmpadjc1);
         [a_V a_B a_svals] = a_zeros(V, B, svals);
      else
         [tmpadjc1] = ret_adimat_onesided_jacobi(a_svals);
         svals = adimat_pop1;
         a_A = adimat_adjsum(a_A, tmpadjc1);
         a_svals = a_zeros1(svals);
      end
      nA1 = adimat_pop1;
   end
end

function [a_A nr_z nr_A nr_V nr_nt] = a_adimat_onesided_jacobi(A, nA1, a_z, a_A, a_V)
   tmplia1 = 0;
   tmpca1 = 0;
   tmpca5 = 0;
   tmpca4 = 0;
   tmpca3 = 0;
   tmpca2 = 0;
   j = 0;
   k = 0;
   V = 0;
   p = 0;
   q = 0;
   r = 0;
   vt = 0;
   s = 0;
   c = 0;
   G = 0;
   [m n] = size(A);
   nt = n;
   slimit = max(n ./ 4, 6) .* 10;
   tmpba1 = 0;
   if nargout > 2
      tmpba1 = 1;
      adimat_push1(V);
      V = eye(n, n);
   end
   adimat_push1(tmpba1);
   z = zeros(nt, 1);
   tmpba1 = 0;
   if nt == 1
      tmpba1 = 1;
      adimat_push1(tmplia1);
      tmplia1 = A' * A;
      adimat_push1(z(1));
      z(1) = tmplia1;
   end
   adimat_push1(tmpba1);
   tol = eps;
   noRotationHere = 0;
   scount = 0;
   rcount = (nt .* (nt - 1)) ./ 2;
   tmpla1 = 0;
   while scount<=slimit && rcount>0
      tmpla1 = tmpla1 + 1;
      adimat_push1(rcount);
      rcount = (nt .* (nt - 1)) ./ 2;
      tmpfra1_2 = nt - 1;
      adimat_push1(j);
      for j=1 : tmpfra1_2
         tmpfra2_1 = j + 1;
         tmpfra2_2 = nt;
         adimat_push1(k);
         for k=tmpfra2_1 : tmpfra2_2
            adimat_push1(noRotationHere);
            noRotationHere = 0;
            adimat_push1(p);
            p = A(:, j)' * A(:, k);
            adimat_push1(q);
            q = A(:, j)' * A(:, j);
            adimat_push1(r);
            r = A(:, k)' * A(:, k);
            adimat_push1(z(j));
            z(j) = q;
            adimat_push1(z(k));
            z(k) = r;
            tmpba1 = 0;
            if q < r
               tmpba1 = 1;
               adimat_push1(tmpca1);
               tmpca1 = q ./ r;
               adimat_push1(q);
               q = tmpca1 - 1;
               adimat_push1(p);
               p = p ./ r;
               adimat_push1(tmpca5);
               tmpca5 = q .* q;
               adimat_push1(tmpca4);
               tmpca4 = conj(p);
               adimat_push1(tmpca3);
               tmpca3 = 4 .* tmpca4;
               adimat_push1(tmpca2);
               tmpca2 = tmpca3 .* p;
               adimat_push1(tmpca1);
               tmpca1 = tmpca2 + tmpca5;
               adimat_push1(vt);
               vt = sqrt(tmpca1);
               adimat_push1(tmpca3);
               tmpca3 = q ./ vt;
               adimat_push1(tmpca2);
               tmpca2 = 1 - tmpca3;
               adimat_push1(tmpca1);
               tmpca1 = 0.5 .* tmpca2;
               adimat_push1(s);
               s = sqrt(tmpca1);
               tmpba2 = 0;
               if p < 0
                  tmpba2 = 1;
                  adimat_push1(s);
                  s = -s;
               end
               adimat_push(tmpba2, tmpca1);
               tmpca1 = vt .* s;
               adimat_push1(c);
               c = p ./ tmpca1;
            elseif q.*r <= eps.^2.*nA1
               tmpba1 = 2;
               adimat_push1(noRotationHere);
               noRotationHere = 1;
            elseif (p ./ q)'.*p./r <= eps.^2.*nA1
               tmpba1 = 3;
               adimat_push1(noRotationHere);
               noRotationHere = 1;
            else
               adimat_push1(tmpca1);
               tmpca1 = r ./ q;
               adimat_push1(r);
               r = 1 - tmpca1;
               adimat_push1(p);
               p = p ./ q;
               adimat_push1(tmpca5);
               tmpca5 = r .* r;
               adimat_push1(tmpca4);
               tmpca4 = conj(p);
               adimat_push1(tmpca3);
               tmpca3 = 4 .* tmpca4;
               adimat_push1(tmpca2);
               tmpca2 = tmpca3 .* p;
               adimat_push1(tmpca1);
               tmpca1 = tmpca2 + tmpca5;
               adimat_push1(vt);
               vt = sqrt(tmpca1);
               adimat_push1(tmpca3);
               tmpca3 = r ./ vt;
               adimat_push1(tmpca2);
               tmpca2 = 1 + tmpca3;
               adimat_push1(tmpca1);
               tmpca1 = 0.5 .* tmpca2;
               adimat_push1(c);
               c = sqrt(tmpca1);
               adimat_push1(tmpca1);
               tmpca1 = vt .* c;
               adimat_push1(s);
               s = p ./ tmpca1;
            end
            adimat_push1(tmpba1);
            tmpba1 = 0;
            if noRotationHere == 0
               tmpba1 = 1;
               adimat_push1(G);
               G = rec_mk_givens(c, s, n, j, k);
               adimat_push1(A);
               A = A * G;
               tmpba2 = 0;
               if nargout > 2
                  tmpba2 = 1;
                  adimat_push1(tmpca1);
                  tmpca1 = V * G;
                  adimat_push1(V);
                  V = full(tmpca1);
               end
               adimat_push1(tmpba2);
            else
               adimat_push1(rcount);
               rcount = rcount - 1;
            end
            adimat_push1(tmpba1);
         end
         adimat_push(tmpfra2_1, tmpfra2_2);
      end
      adimat_push1(tmpfra1_2);
      tmpba1 = 0;
      if nt > 1
         tmpba1 = 1;
         tmpba2 = 0;
         if z(nt)./(z(1) + tol) <= tol
            tmpba2 = 1;
            adimat_push1(nt);
            nt = nt - 1;
         end
         adimat_push1(tmpba2);
      end
      adimat_push(tmpba1, scount);
      scount = scount + 1;
   end
   adimat_push1(tmpla1);
   tmpba1 = 0;
   if nargout > 1
      tmpba1 = 1;
   end
   adimat_push1(tmpba1);
   tmpba1 = 0;
   if scount > slimit
      tmpba1 = 1;
      error('adimat:onesided_jacobi:too_many_sweeps', 'Too many sweeps (%d) in one-sided Jacobi scheme', scount);
   end
   adimat_push1(tmpba1);
   nr_z = z;
   nr_A = A;
   nr_V = V;
   nr_nt = nt;
   [a_p a_q a_r a_vt a_s a_c a_G a_tmplia1 a_tmpca1 a_tmpca5 a_tmpca4 a_tmpca3 a_tmpca2] = a_zeros(p, q, r, vt, s, c, G, tmplia1, tmpca1, tmpca5, tmpca4, tmpca3, tmpca2);
   if nargin < 3
      a_z = a_zeros1(z);
   end
   if nargin < 4
      a_A = a_zeros1(A);
   end
   if nargin < 5
      a_V = a_zeros1(V);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      error('adimat:onesided_jacobi:too_many_sweeps', 'Too many sweeps (%d) in one-sided Jacobi scheme', scount);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
   end
   tmpla1 = adimat_pop1;
   while tmpla1 > 0
      tmpla1 = tmpla1 - 1;
      [scount tmpba1] = adimat_pop;
      if tmpba1 == 1
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            nt = adimat_pop1;
         end
      end
      tmpfra1_2 = adimat_pop1;
      for j=fliplr(1 : tmpfra1_2)
         [tmpfra2_2 tmpfra2_1] = adimat_pop;
         for k=fliplr(tmpfra2_1 : tmpfra2_2)
            tmpba1 = adimat_pop1;
            if tmpba1 == 1
               tmpba2 = adimat_pop1;
               if tmpba2 == 1
                  V = adimat_pop1;
                  a_tmpca1 = adimat_adjsum(a_tmpca1, a_full(a_V, tmpca1));
                  a_V = a_zeros1(V);
                  tmpca1 = adimat_pop1;
                  a_V = adimat_adjsum(a_V, a_tmpca1 * G.');
                  a_G = adimat_adjsum(a_G, V.' * a_tmpca1);
                  a_tmpca1 = a_zeros1(tmpca1);
               end
               A = adimat_pop1;
               a_G = adimat_adjsum(a_G, A.' * a_A);
               tmpsa1 = a_A;
               a_A = a_zeros1(A);
               a_A = adimat_adjsum(a_A, tmpsa1 * G.');
               [tmpadjc1 tmpadjc2] = ret_mk_givens(a_G);
               G = adimat_pop1;
               a_c = adimat_adjsum(a_c, tmpadjc1);
               a_s = adimat_adjsum(a_s, tmpadjc2);
               a_G = a_zeros1(G);
            else
               rcount = adimat_pop1;
            end
            tmpba1 = adimat_pop1;
            if tmpba1 == 1
               c = adimat_pop1;
               a_p = adimat_adjsum(a_p, a_c ./ tmpca1);
               a_tmpca1 = adimat_adjsum(a_tmpca1, -((p./tmpca1 .* a_c) ./ tmpca1));
               a_c = a_zeros1(c);
               tmpca1 = adimat_pop1;
               a_vt = adimat_adjsum(a_vt, a_tmpca1 .* s);
               a_s = adimat_adjsum(a_s, vt .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpba2 = adimat_pop1;
               if tmpba2 == 1
                  s = adimat_pop1;
                  tmpsa1 = a_s;
                  a_s = a_zeros1(s);
                  a_s = adimat_adjsum(a_s, -tmpsa1);
               end
               s = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_s./sqrt(tmpca1));
               a_s = a_zeros1(s);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, 0.5 .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, -a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_q = adimat_adjsum(a_q, a_tmpca3 ./ vt);
               a_vt = adimat_adjsum(a_vt, -((q./vt .* a_tmpca3) ./ vt));
               a_tmpca3 = a_zeros1(tmpca3);
               vt = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_vt./sqrt(tmpca1));
               a_vt = a_zeros1(vt);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, a_tmpca1);
               a_tmpca5 = adimat_adjsum(a_tmpca5, a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, a_tmpca2 .* p);
               a_p = adimat_adjsum(a_p, tmpca3 .* a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_tmpca4 = adimat_adjsum(a_tmpca4, 4 .* a_tmpca3);
               a_tmpca3 = a_zeros1(tmpca3);
               tmpca4 = adimat_pop1;
               a_p = adimat_adjsum(a_p, call(@conj, a_tmpca4));
               a_tmpca4 = a_zeros1(tmpca4);
               tmpca5 = adimat_pop1;
               a_q = adimat_adjsum(a_q, a_tmpca5 .* q);
               a_q = adimat_adjsum(a_q, q .* a_tmpca5);
               a_tmpca5 = a_zeros1(tmpca5);
               p = adimat_pop1;
               a_r = adimat_adjsum(a_r, -((p./r .* a_p) ./ r));
               tmpsa1 = a_p;
               a_p = a_zeros1(p);
               a_p = adimat_adjsum(a_p, tmpsa1 ./ r);
               q = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, a_q);
               a_q = a_zeros1(q);
               tmpca1 = adimat_pop1;
               a_q = adimat_adjsum(a_q, a_tmpca1 ./ r);
               a_r = adimat_adjsum(a_r, -((q./r .* a_tmpca1) ./ r));
               a_tmpca1 = a_zeros1(tmpca1);
            elseif tmpba1 == 2
               noRotationHere = adimat_pop1;
            elseif tmpba1 == 3
               noRotationHere = adimat_pop1;
            else
               s = adimat_pop1;
               a_p = adimat_adjsum(a_p, a_s ./ tmpca1);
               a_tmpca1 = adimat_adjsum(a_tmpca1, -((p./tmpca1 .* a_s) ./ tmpca1));
               a_s = a_zeros1(s);
               tmpca1 = adimat_pop1;
               a_vt = adimat_adjsum(a_vt, a_tmpca1 .* c);
               a_c = adimat_adjsum(a_c, vt .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               c = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_c./sqrt(tmpca1));
               a_c = a_zeros1(c);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, 0.5 .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_r = adimat_adjsum(a_r, a_tmpca3 ./ vt);
               a_vt = adimat_adjsum(a_vt, -((r./vt .* a_tmpca3) ./ vt));
               a_tmpca3 = a_zeros1(tmpca3);
               vt = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_vt./sqrt(tmpca1));
               a_vt = a_zeros1(vt);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, a_tmpca1);
               a_tmpca5 = adimat_adjsum(a_tmpca5, a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, a_tmpca2 .* p);
               a_p = adimat_adjsum(a_p, tmpca3 .* a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_tmpca4 = adimat_adjsum(a_tmpca4, 4 .* a_tmpca3);
               a_tmpca3 = a_zeros1(tmpca3);
               tmpca4 = adimat_pop1;
               a_p = adimat_adjsum(a_p, call(@conj, a_tmpca4));
               a_tmpca4 = a_zeros1(tmpca4);
               tmpca5 = adimat_pop1;
               a_r = adimat_adjsum(a_r, a_tmpca5 .* r);
               a_r = adimat_adjsum(a_r, r .* a_tmpca5);
               a_tmpca5 = a_zeros1(tmpca5);
               p = adimat_pop1;
               a_q = adimat_adjsum(a_q, -((p./q .* a_p) ./ q));
               tmpsa1 = a_p;
               a_p = a_zeros1(p);
               a_p = adimat_adjsum(a_p, tmpsa1 ./ q);
               r = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, -a_r);
               a_r = a_zeros1(r);
               tmpca1 = adimat_pop1;
               a_r = adimat_adjsum(a_r, a_tmpca1 ./ q);
               a_q = adimat_adjsum(a_q, -((r./q .* a_tmpca1) ./ q));
               a_tmpca1 = a_zeros1(tmpca1);
            end
            z(k) = adimat_pop1;
            a_r = adimat_adjsum(a_r, adimat_adjreshape(r, a_z(k)));
            a_z(k) = a_zeros1(z(k));
            z(j) = adimat_pop1;
            a_q = adimat_adjsum(a_q, adimat_adjreshape(q, a_z(j)));
            a_z(j) = a_zeros1(z(j));
            r = adimat_pop1;
            a_A(:, k) = adimat_adjsum(a_A(:, k), a_ctranspose(a_r * A(:, k).', A(:, k)));
            a_A(:, k) = adimat_adjsum(a_A(:, k), A(:, k)'.' * a_r);
            a_r = a_zeros1(r);
            q = adimat_pop1;
            a_A(:, j) = adimat_adjsum(a_A(:, j), a_ctranspose(a_q * A(:, j).', A(:, j)));
            a_A(:, j) = adimat_adjsum(a_A(:, j), A(:, j)'.' * a_q);
            a_q = a_zeros1(q);
            p = adimat_pop1;
            a_A(:, j) = adimat_adjsum(a_A(:, j), a_ctranspose(a_p * A(:, k).', A(:, j)));
            a_A(:, k) = adimat_adjsum(a_A(:, k), A(:, j)'.' * a_p);
            a_p = a_zeros1(p);
            noRotationHere = adimat_pop1;
         end
         k = adimat_pop1;
      end
      [j rcount] = adimat_pop;
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      z(1) = adimat_pop1;
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_z(1)));
      a_z(1) = a_zeros1(z(1));
      tmplia1 = adimat_pop1;
      a_A = adimat_adjsum(a_A, a_ctranspose(a_tmplia1 * A.', A));
      a_A = adimat_adjsum(a_A, A'.' * a_tmplia1);
      a_tmplia1 = a_zeros1(tmplia1);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      V = adimat_pop1;
      a_V = a_zeros1(V);
   end
end

function [z A V nt] = rec_adimat_onesided_jacobi(A, nA1)
   tmplia1 = 0;
   tmpca1 = 0;
   tmpca5 = 0;
   tmpca4 = 0;
   tmpca3 = 0;
   tmpca2 = 0;
   j = 0;
   k = 0;
   V = 0;
   p = 0;
   q = 0;
   r = 0;
   vt = 0;
   s = 0;
   c = 0;
   G = 0;
   [m n] = size(A);
   nt = n;
   slimit = max(n ./ 4, 6) .* 10;
   tmpba1 = 0;
   if nargout > 2
      tmpba1 = 1;
      adimat_push1(V);
      V = eye(n, n);
   end
   adimat_push1(tmpba1);
   z = zeros(nt, 1);
   tmpba1 = 0;
   if nt == 1
      tmpba1 = 1;
      adimat_push1(tmplia1);
      tmplia1 = A' * A;
      adimat_push1(z(1));
      z(1) = tmplia1;
   end
   adimat_push1(tmpba1);
   tol = eps;
   noRotationHere = 0;
   scount = 0;
   rcount = (nt .* (nt - 1)) ./ 2;
   tmpla1 = 0;
   while scount<=slimit && rcount>0
      tmpla1 = tmpla1 + 1;
      adimat_push1(rcount);
      rcount = (nt .* (nt - 1)) ./ 2;
      tmpfra1_2 = nt - 1;
      adimat_push1(j);
      for j=1 : tmpfra1_2
         tmpfra2_1 = j + 1;
         tmpfra2_2 = nt;
         adimat_push1(k);
         for k=tmpfra2_1 : tmpfra2_2
            adimat_push1(noRotationHere);
            noRotationHere = 0;
            adimat_push1(p);
            p = A(:, j)' * A(:, k);
            adimat_push1(q);
            q = A(:, j)' * A(:, j);
            adimat_push1(r);
            r = A(:, k)' * A(:, k);
            adimat_push1(z(j));
            z(j) = q;
            adimat_push1(z(k));
            z(k) = r;
            tmpba1 = 0;
            if q < r
               tmpba1 = 1;
               adimat_push1(tmpca1);
               tmpca1 = q ./ r;
               adimat_push1(q);
               q = tmpca1 - 1;
               adimat_push1(p);
               p = p ./ r;
               adimat_push1(tmpca5);
               tmpca5 = q .* q;
               adimat_push1(tmpca4);
               tmpca4 = conj(p);
               adimat_push1(tmpca3);
               tmpca3 = 4 .* tmpca4;
               adimat_push1(tmpca2);
               tmpca2 = tmpca3 .* p;
               adimat_push1(tmpca1);
               tmpca1 = tmpca2 + tmpca5;
               adimat_push1(vt);
               vt = sqrt(tmpca1);
               adimat_push1(tmpca3);
               tmpca3 = q ./ vt;
               adimat_push1(tmpca2);
               tmpca2 = 1 - tmpca3;
               adimat_push1(tmpca1);
               tmpca1 = 0.5 .* tmpca2;
               adimat_push1(s);
               s = sqrt(tmpca1);
               tmpba2 = 0;
               if p < 0
                  tmpba2 = 1;
                  adimat_push1(s);
                  s = -s;
               end
               adimat_push(tmpba2, tmpca1);
               tmpca1 = vt .* s;
               adimat_push1(c);
               c = p ./ tmpca1;
            elseif q.*r <= eps.^2.*nA1
               tmpba1 = 2;
               adimat_push1(noRotationHere);
               noRotationHere = 1;
            elseif (p ./ q)'.*p./r <= eps.^2.*nA1
               tmpba1 = 3;
               adimat_push1(noRotationHere);
               noRotationHere = 1;
            else
               adimat_push1(tmpca1);
               tmpca1 = r ./ q;
               adimat_push1(r);
               r = 1 - tmpca1;
               adimat_push1(p);
               p = p ./ q;
               adimat_push1(tmpca5);
               tmpca5 = r .* r;
               adimat_push1(tmpca4);
               tmpca4 = conj(p);
               adimat_push1(tmpca3);
               tmpca3 = 4 .* tmpca4;
               adimat_push1(tmpca2);
               tmpca2 = tmpca3 .* p;
               adimat_push1(tmpca1);
               tmpca1 = tmpca2 + tmpca5;
               adimat_push1(vt);
               vt = sqrt(tmpca1);
               adimat_push1(tmpca3);
               tmpca3 = r ./ vt;
               adimat_push1(tmpca2);
               tmpca2 = 1 + tmpca3;
               adimat_push1(tmpca1);
               tmpca1 = 0.5 .* tmpca2;
               adimat_push1(c);
               c = sqrt(tmpca1);
               adimat_push1(tmpca1);
               tmpca1 = vt .* c;
               adimat_push1(s);
               s = p ./ tmpca1;
            end
            adimat_push1(tmpba1);
            tmpba1 = 0;
            if noRotationHere == 0
               tmpba1 = 1;
               adimat_push1(G);
               G = rec_mk_givens(c, s, n, j, k);
               adimat_push1(A);
               A = A * G;
               tmpba2 = 0;
               if nargout > 2
                  tmpba2 = 1;
                  adimat_push1(tmpca1);
                  tmpca1 = V * G;
                  adimat_push1(V);
                  V = full(tmpca1);
               end
               adimat_push1(tmpba2);
            else
               adimat_push1(rcount);
               rcount = rcount - 1;
            end
            adimat_push1(tmpba1);
         end
         adimat_push(tmpfra2_1, tmpfra2_2);
      end
      adimat_push1(tmpfra1_2);
      tmpba1 = 0;
      if nt > 1
         tmpba1 = 1;
         tmpba2 = 0;
         if z(nt)./(z(1) + tol) <= tol
            tmpba2 = 1;
            adimat_push1(nt);
            nt = nt - 1;
         end
         adimat_push1(tmpba2);
      end
      adimat_push(tmpba1, scount);
      scount = scount + 1;
   end
   adimat_push1(tmpla1);
   tmpba1 = 0;
   if nargout > 1
      tmpba1 = 1;
   end
   adimat_push1(tmpba1);
   tmpba1 = 0;
   if scount > slimit
      tmpba1 = 1;
      error('adimat:onesided_jacobi:too_many_sweeps', 'Too many sweeps (%d) in one-sided Jacobi scheme', scount);
   end
   adimat_push(tmpba1, j, k, p, q, r, vt, s, c, G, m, n, slimit, tmplia1, tol, noRotationHere, scount, rcount, tmpca1, tmpca5, tmpca4, tmpca3, tmpca2, z, A, V, nt, A);
   if nargin > 1
      adimat_push1(nA1);
   end
   adimat_push1(nargin);
end

function a_A = ret_adimat_onesided_jacobi(a_z, a_A, a_V)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      nA1 = adimat_pop1;
   end
   [A nt V A z tmpca2 tmpca3 tmpca4 tmpca5 tmpca1 rcount scount noRotationHere tol tmplia1 slimit n m G c s vt r q p k j] = adimat_pop;
   [a_p a_q a_r a_vt a_s a_c a_G a_tmplia1 a_tmpca1 a_tmpca5 a_tmpca4 a_tmpca3 a_tmpca2] = a_zeros(p, q, r, vt, s, c, G, tmplia1, tmpca1, tmpca5, tmpca4, tmpca3, tmpca2);
   if nargin < 1
      a_z = a_zeros1(z);
   end
   if nargin < 2
      a_A = a_zeros1(A);
   end
   if nargin < 3
      a_V = a_zeros1(V);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      error('adimat:onesided_jacobi:too_many_sweeps', 'Too many sweeps (%d) in one-sided Jacobi scheme', scount);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
   end
   tmpla1 = adimat_pop1;
   while tmpla1 > 0
      tmpla1 = tmpla1 - 1;
      [scount tmpba1] = adimat_pop;
      if tmpba1 == 1
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            nt = adimat_pop1;
         end
      end
      tmpfra1_2 = adimat_pop1;
      for j=fliplr(1 : tmpfra1_2)
         [tmpfra2_2 tmpfra2_1] = adimat_pop;
         for k=fliplr(tmpfra2_1 : tmpfra2_2)
            tmpba1 = adimat_pop1;
            if tmpba1 == 1
               tmpba2 = adimat_pop1;
               if tmpba2 == 1
                  V = adimat_pop1;
                  a_tmpca1 = adimat_adjsum(a_tmpca1, a_full(a_V, tmpca1));
                  a_V = a_zeros1(V);
                  tmpca1 = adimat_pop1;
                  a_V = adimat_adjsum(a_V, a_tmpca1 * G.');
                  a_G = adimat_adjsum(a_G, V.' * a_tmpca1);
                  a_tmpca1 = a_zeros1(tmpca1);
               end
               A = adimat_pop1;
               a_G = adimat_adjsum(a_G, A.' * a_A);
               tmpsa1 = a_A;
               a_A = a_zeros1(A);
               a_A = adimat_adjsum(a_A, tmpsa1 * G.');
               [tmpadjc1 tmpadjc2] = ret_mk_givens(a_G);
               G = adimat_pop1;
               a_c = adimat_adjsum(a_c, tmpadjc1);
               a_s = adimat_adjsum(a_s, tmpadjc2);
               a_G = a_zeros1(G);
            else
               rcount = adimat_pop1;
            end
            tmpba1 = adimat_pop1;
            if tmpba1 == 1
               c = adimat_pop1;
               a_p = adimat_adjsum(a_p, a_c ./ tmpca1);
               a_tmpca1 = adimat_adjsum(a_tmpca1, -((p./tmpca1 .* a_c) ./ tmpca1));
               a_c = a_zeros1(c);
               tmpca1 = adimat_pop1;
               a_vt = adimat_adjsum(a_vt, a_tmpca1 .* s);
               a_s = adimat_adjsum(a_s, vt .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpba2 = adimat_pop1;
               if tmpba2 == 1
                  s = adimat_pop1;
                  tmpsa1 = a_s;
                  a_s = a_zeros1(s);
                  a_s = adimat_adjsum(a_s, -tmpsa1);
               end
               s = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_s./sqrt(tmpca1));
               a_s = a_zeros1(s);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, 0.5 .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, -a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_q = adimat_adjsum(a_q, a_tmpca3 ./ vt);
               a_vt = adimat_adjsum(a_vt, -((q./vt .* a_tmpca3) ./ vt));
               a_tmpca3 = a_zeros1(tmpca3);
               vt = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_vt./sqrt(tmpca1));
               a_vt = a_zeros1(vt);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, a_tmpca1);
               a_tmpca5 = adimat_adjsum(a_tmpca5, a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, a_tmpca2 .* p);
               a_p = adimat_adjsum(a_p, tmpca3 .* a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_tmpca4 = adimat_adjsum(a_tmpca4, 4 .* a_tmpca3);
               a_tmpca3 = a_zeros1(tmpca3);
               tmpca4 = adimat_pop1;
               a_p = adimat_adjsum(a_p, call(@conj, a_tmpca4));
               a_tmpca4 = a_zeros1(tmpca4);
               tmpca5 = adimat_pop1;
               a_q = adimat_adjsum(a_q, a_tmpca5 .* q);
               a_q = adimat_adjsum(a_q, q .* a_tmpca5);
               a_tmpca5 = a_zeros1(tmpca5);
               p = adimat_pop1;
               a_r = adimat_adjsum(a_r, -((p./r .* a_p) ./ r));
               tmpsa1 = a_p;
               a_p = a_zeros1(p);
               a_p = adimat_adjsum(a_p, tmpsa1 ./ r);
               q = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, a_q);
               a_q = a_zeros1(q);
               tmpca1 = adimat_pop1;
               a_q = adimat_adjsum(a_q, a_tmpca1 ./ r);
               a_r = adimat_adjsum(a_r, -((q./r .* a_tmpca1) ./ r));
               a_tmpca1 = a_zeros1(tmpca1);
            elseif tmpba1 == 2
               noRotationHere = adimat_pop1;
            elseif tmpba1 == 3
               noRotationHere = adimat_pop1;
            else
               s = adimat_pop1;
               a_p = adimat_adjsum(a_p, a_s ./ tmpca1);
               a_tmpca1 = adimat_adjsum(a_tmpca1, -((p./tmpca1 .* a_s) ./ tmpca1));
               a_s = a_zeros1(s);
               tmpca1 = adimat_pop1;
               a_vt = adimat_adjsum(a_vt, a_tmpca1 .* c);
               a_c = adimat_adjsum(a_c, vt .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               c = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_c./sqrt(tmpca1));
               a_c = a_zeros1(c);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, 0.5 .* a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_r = adimat_adjsum(a_r, a_tmpca3 ./ vt);
               a_vt = adimat_adjsum(a_vt, -((r./vt .* a_tmpca3) ./ vt));
               a_tmpca3 = a_zeros1(tmpca3);
               vt = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, 0.5 .* a_vt./sqrt(tmpca1));
               a_vt = a_zeros1(vt);
               tmpca1 = adimat_pop1;
               a_tmpca2 = adimat_adjsum(a_tmpca2, a_tmpca1);
               a_tmpca5 = adimat_adjsum(a_tmpca5, a_tmpca1);
               a_tmpca1 = a_zeros1(tmpca1);
               tmpca2 = adimat_pop1;
               a_tmpca3 = adimat_adjsum(a_tmpca3, a_tmpca2 .* p);
               a_p = adimat_adjsum(a_p, tmpca3 .* a_tmpca2);
               a_tmpca2 = a_zeros1(tmpca2);
               tmpca3 = adimat_pop1;
               a_tmpca4 = adimat_adjsum(a_tmpca4, 4 .* a_tmpca3);
               a_tmpca3 = a_zeros1(tmpca3);
               tmpca4 = adimat_pop1;
               a_p = adimat_adjsum(a_p, call(@conj, a_tmpca4));
               a_tmpca4 = a_zeros1(tmpca4);
               tmpca5 = adimat_pop1;
               a_r = adimat_adjsum(a_r, a_tmpca5 .* r);
               a_r = adimat_adjsum(a_r, r .* a_tmpca5);
               a_tmpca5 = a_zeros1(tmpca5);
               p = adimat_pop1;
               a_q = adimat_adjsum(a_q, -((p./q .* a_p) ./ q));
               tmpsa1 = a_p;
               a_p = a_zeros1(p);
               a_p = adimat_adjsum(a_p, tmpsa1 ./ q);
               r = adimat_pop1;
               a_tmpca1 = adimat_adjsum(a_tmpca1, -a_r);
               a_r = a_zeros1(r);
               tmpca1 = adimat_pop1;
               a_r = adimat_adjsum(a_r, a_tmpca1 ./ q);
               a_q = adimat_adjsum(a_q, -((r./q .* a_tmpca1) ./ q));
               a_tmpca1 = a_zeros1(tmpca1);
            end
            z(k) = adimat_pop1;
            a_r = adimat_adjsum(a_r, adimat_adjreshape(r, a_z(k)));
            a_z(k) = a_zeros1(z(k));
            z(j) = adimat_pop1;
            a_q = adimat_adjsum(a_q, adimat_adjreshape(q, a_z(j)));
            a_z(j) = a_zeros1(z(j));
            r = adimat_pop1;
            a_A(:, k) = adimat_adjsum(a_A(:, k), a_ctranspose(a_r * A(:, k).', A(:, k)));
            a_A(:, k) = adimat_adjsum(a_A(:, k), A(:, k)'.' * a_r);
            a_r = a_zeros1(r);
            q = adimat_pop1;
            a_A(:, j) = adimat_adjsum(a_A(:, j), a_ctranspose(a_q * A(:, j).', A(:, j)));
            a_A(:, j) = adimat_adjsum(a_A(:, j), A(:, j)'.' * a_q);
            a_q = a_zeros1(q);
            p = adimat_pop1;
            a_A(:, j) = adimat_adjsum(a_A(:, j), a_ctranspose(a_p * A(:, k).', A(:, j)));
            a_A(:, k) = adimat_adjsum(a_A(:, k), A(:, j)'.' * a_p);
            a_p = a_zeros1(p);
            noRotationHere = adimat_pop1;
         end
         k = adimat_pop1;
      end
      [j rcount] = adimat_pop;
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      z(1) = adimat_pop1;
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_z(1)));
      a_z(1) = a_zeros1(z(1));
      tmplia1 = adimat_pop1;
      a_A = adimat_adjsum(a_A, a_ctranspose(a_tmplia1 * A.', A));
      a_A = adimat_adjsum(a_A, A'.' * a_tmplia1);
      a_tmplia1 = a_zeros1(tmplia1);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      V = adimat_pop1;
      a_V = a_zeros1(V);
   end
end
% $Id: adimat_onesided_jacobi.m 4162 2014-05-12 07:34:49Z willkomm $

function [a_A a_qk nr_Q nr_H nr_hkkm1] = a_adimat_arnoldi(A, m, qk, a_Q, a_hkkm1)
   tmpda2 = 0;
   tmpda1 = 0;
   j = 0;
   hkkm1 = 0;
   hjkm1 = 0;
   n = size(A, 1);
   tmpba1 = 0;
   if nargin < 2
      tmpba1 = 1;
      adimat_push1(m);
      m = n;
   end
   adimat_push1(tmpba1);
   H = zeros(m);
   Q = eye(n, m);
   tmpba1 = 0;
   if nargin < 3
      tmpba1 = 1;
      tmpba2 = 0;
      if isreal(A)
         tmpba2 = 1;
         adimat_push1(qk);
         qk = rand(n, 1);
      else
         adimat_push1(tmpda2);
         tmpda2 = rand(n, 1);
         adimat_push1(tmpda1);
         tmpda1 = rand(n, 1);
         adimat_push1(qk);
         qk = complex(tmpda1, tmpda2);
      end
      adimat_push1(tmpba2);
   end
   adimat_push1(tmpba1);
   nexist = size(qk, 2);
   adimat_push1(Q(:, 1 : nexist));
   Q(:, 1 : nexist) = qk;
   adimat_push1(qk);
   qk = qk(:, end);
   tmpca1 = norm(qk);
   adimat_push1(qk);
   qk = qk ./ tmpca1;
   startInd = 1;
   tmplea1 = 0;
   tmpfra1_1 = nexist + 1;
   tmpfra1_2 = m + 1;
   for k=tmpfra1_1 : tmpfra1_2
      adimat_push1(qk);
      qk = A * qk;
      tmpfra2_1 = startInd;
      tmpfra2_2 = k - 1;
      adimat_push1(j);
      for j=tmpfra2_1 : tmpfra2_2
         adimat_push1(hjkm1);
         hjkm1 = Q(:, j)' * qk;
         adimat_push1(tmpca1);
         tmpca1 = hjkm1 .* Q(:, j);
         adimat_push1(qk);
         qk = qk - tmpca1;
         adimat_push1(H(j, k - 1));
         H(j, k - 1) = hjkm1;
      end
      adimat_push(tmpfra2_1, tmpfra2_2);
      tmpba1 = 0;
      if isequal(qk, 0)
         tmpba1 = 1;
         adimat_push1(hkkm1);
         hkkm1 = 0;
      else
         adimat_push1(hkkm1);
         hkkm1 = norm(qk);
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if k == m+1
         tmpba1 = 1;
         tmpba2 = 0;
         if m == n
            tmpba2 = 1;
            tmpba3 = 0;
            if hkkm1 > eps.*1e2
               tmpba3 = 1;
               warning('adimat:arnoldi:inaccurate', 'Large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            adimat_push1(tmpba3);
            tmpba3 = 0;
            if hkkm1 > eps.*1e4
               tmpba3 = 1;
               warning('adimat:arnoldi:failure', 'Very large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            adimat_push1(tmpba3);
         end
         adimat_push1(tmpba2);
      else
         tmpba2 = 0;
         if hkkm1 < eps
            tmpba2 = 1;
            warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
            tmplea1 = 1;
            tmpfra1_2 = k;
            break;
         end
         adimat_push1(tmpba2);
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if hkkm1==0 || k==m+1
         tmpba1 = 1;
         tmplea1 = 2;
         tmpfra1_2 = k;
         break;
      end
      adimat_push(tmpba1, qk);
      qk = qk ./ hkkm1;
      adimat_push1(H(k, k - 1));
      H(k, k - 1) = hkkm1;
      adimat_push1(Q(:, k));
      Q(:, k) = qk;
   end
   adimat_push(tmpfra1_1, tmpfra1_2, tmplea1);
   nr_Q = Q;
   nr_H = H;
   nr_hkkm1 = hkkm1;
   [a_hjkm1 a_tmpca1 a_A a_qk] = a_zeros(hjkm1, tmpca1, A, qk);
   if nargin < 4
      a_Q = a_zeros1(Q);
   end
   if nargin < 5
      a_hkkm1 = a_zeros1(hkkm1);
   end
   [tmplea1 tmpfra1_2 tmpfra1_1] = adimat_pop;
   if tmplea1 == 1
      k = tmpfra1_2;
      tmpfra1_2 = tmpfra1_2 - 1;
      warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         hkkm1 = adimat_pop1;
         a_hkkm1 = a_zeros1(hkkm1);
      else
         hkkm1 = adimat_pop1;
         a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_hkkm1));
         a_hkkm1 = a_zeros1(hkkm1);
      end
      [tmpfra2_2 tmpfra2_1] = adimat_pop;
      for j=fliplr(tmpfra2_1 : tmpfra2_2)
         [H(j, k - 1) qk] = adimat_pop;
         a_tmpca1 = adimat_adjsum(a_tmpca1, -a_qk);
         tmpsa1 = a_qk;
         a_qk = a_zeros1(qk);
         a_qk = adimat_adjsum(a_qk, tmpsa1);
         tmpca1 = adimat_pop1;
         a_hjkm1 = adimat_adjsum(a_hjkm1, a_tmpca1 .* Q(:, j));
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), hjkm1 .* a_tmpca1);
         a_tmpca1 = a_zeros1(tmpca1);
         hjkm1 = adimat_pop1;
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), a_ctranspose(a_hjkm1 * qk.', Q(:, j)));
         a_qk = adimat_adjsum(a_qk, Q(:, j)'.' * a_hjkm1);
         a_hjkm1 = a_zeros1(hjkm1);
      end
      [j qk] = adimat_pop;
      a_A = adimat_adjsum(a_A, a_qk * qk.');
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, A.' * tmpsa1);
   end
   if tmplea1 == 2
      k = tmpfra1_2;
      tmpfra1_2 = tmpfra1_2 - 1;
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:failure', 'Very large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:inaccurate', 'Large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
         end
      else
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
         end
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         hkkm1 = adimat_pop1;
         a_hkkm1 = a_zeros1(hkkm1);
      else
         hkkm1 = adimat_pop1;
         a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_hkkm1));
         a_hkkm1 = a_zeros1(hkkm1);
      end
      [tmpfra2_2 tmpfra2_1] = adimat_pop;
      for j=fliplr(tmpfra2_1 : tmpfra2_2)
         [H(j, k - 1) qk] = adimat_pop;
         a_tmpca1 = adimat_adjsum(a_tmpca1, -a_qk);
         tmpsa1 = a_qk;
         a_qk = a_zeros1(qk);
         a_qk = adimat_adjsum(a_qk, tmpsa1);
         tmpca1 = adimat_pop1;
         a_hjkm1 = adimat_adjsum(a_hjkm1, a_tmpca1 .* Q(:, j));
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), hjkm1 .* a_tmpca1);
         a_tmpca1 = a_zeros1(tmpca1);
         hjkm1 = adimat_pop1;
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), a_ctranspose(a_hjkm1 * qk.', Q(:, j)));
         a_qk = adimat_adjsum(a_qk, Q(:, j)'.' * a_hjkm1);
         a_hjkm1 = a_zeros1(hjkm1);
      end
      [j qk] = adimat_pop;
      a_A = adimat_adjsum(a_A, a_qk * qk.');
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, A.' * tmpsa1);
   end
   for k=fliplr(tmpfra1_1 : tmpfra1_2)
      Q(:, k) = adimat_pop1;
      a_qk = adimat_adjsum(a_qk, adimat_adjreshape(qk, a_Q(:, k)));
      a_Q(:, k) = a_zeros1(Q(:, k));
      [H(k, k - 1) qk] = adimat_pop;
      a_hkkm1 = adimat_adjsum(a_hkkm1, -((qk./hkkm1 .* a_qk) ./ hkkm1));
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, tmpsa1 ./ hkkm1);
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:failure', 'Very large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:inaccurate', 'Large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
         end
      else
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
         end
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         hkkm1 = adimat_pop1;
         a_hkkm1 = a_zeros1(hkkm1);
      else
         hkkm1 = adimat_pop1;
         a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_hkkm1));
         a_hkkm1 = a_zeros1(hkkm1);
      end
      [tmpfra2_2 tmpfra2_1] = adimat_pop;
      for j=fliplr(tmpfra2_1 : tmpfra2_2)
         [H(j, k - 1) qk] = adimat_pop;
         a_tmpca1 = adimat_adjsum(a_tmpca1, -a_qk);
         tmpsa1 = a_qk;
         a_qk = a_zeros1(qk);
         a_qk = adimat_adjsum(a_qk, tmpsa1);
         tmpca1 = adimat_pop1;
         a_hjkm1 = adimat_adjsum(a_hjkm1, a_tmpca1 .* Q(:, j));
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), hjkm1 .* a_tmpca1);
         a_tmpca1 = a_zeros1(tmpca1);
         hjkm1 = adimat_pop1;
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), a_ctranspose(a_hjkm1 * qk.', Q(:, j)));
         a_qk = adimat_adjsum(a_qk, Q(:, j)'.' * a_hjkm1);
         a_hjkm1 = a_zeros1(hjkm1);
      end
      [j qk] = adimat_pop;
      a_A = adimat_adjsum(a_A, a_qk * qk.');
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, A.' * tmpsa1);
   end
   qk = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, -((qk./tmpca1 .* a_qk) ./ tmpca1));
   tmpsa1 = a_qk;
   a_qk = a_zeros1(qk);
   a_qk = adimat_adjsum(a_qk, tmpsa1 ./ tmpca1);
   a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_tmpca1));
   qk = adimat_pop1;
   tmpsa1 = a_qk;
   a_qk = a_zeros1(qk);
   a_qk(:, end) = adimat_adjsum(a_qk(:, end), tmpsa1);
   Q(:, 1 : nexist) = adimat_pop1;
   a_qk = adimat_adjsum(a_qk, adimat_adjreshape(qk, a_Q(:, 1 : nexist)));
   a_Q(:, 1 : nexist) = a_zeros1(Q(:, 1 : nexist));
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         qk = adimat_pop1;
         a_qk = a_zeros1(qk);
      else
         qk = adimat_pop1;
         a_qk = a_zeros1(qk);
         [tmpda1 tmpda2] = adimat_pop;
      end
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      m = adimat_pop1;
   end
end

function [Q H hkkm1] = rec_adimat_arnoldi(A, m, qk)
   tmpda2 = 0;
   tmpda1 = 0;
   j = 0;
   hkkm1 = 0;
   hjkm1 = 0;
   n = size(A, 1);
   tmpba1 = 0;
   if nargin < 2
      tmpba1 = 1;
      adimat_push1(m);
      m = n;
   end
   adimat_push1(tmpba1);
   H = zeros(m);
   Q = eye(n, m);
   tmpba1 = 0;
   if nargin < 3
      tmpba1 = 1;
      tmpba2 = 0;
      if isreal(A)
         tmpba2 = 1;
         adimat_push1(qk);
         qk = rand(n, 1);
      else
         adimat_push1(tmpda2);
         tmpda2 = rand(n, 1);
         adimat_push1(tmpda1);
         tmpda1 = rand(n, 1);
         adimat_push1(qk);
         qk = complex(tmpda1, tmpda2);
      end
      adimat_push1(tmpba2);
   end
   adimat_push1(tmpba1);
   nexist = size(qk, 2);
   adimat_push1(Q(:, 1 : nexist));
   Q(:, 1 : nexist) = qk;
   adimat_push1(qk);
   qk = qk(:, end);
   tmpca1 = norm(qk);
   adimat_push1(qk);
   qk = qk ./ tmpca1;
   startInd = 1;
   tmplea1 = 0;
   tmpfra1_1 = nexist + 1;
   tmpfra1_2 = m + 1;
   for k=tmpfra1_1 : tmpfra1_2
      adimat_push1(qk);
      qk = A * qk;
      tmpfra2_1 = startInd;
      tmpfra2_2 = k - 1;
      adimat_push1(j);
      for j=tmpfra2_1 : tmpfra2_2
         adimat_push1(hjkm1);
         hjkm1 = Q(:, j)' * qk;
         adimat_push1(tmpca1);
         tmpca1 = hjkm1 .* Q(:, j);
         adimat_push1(qk);
         qk = qk - tmpca1;
         adimat_push1(H(j, k - 1));
         H(j, k - 1) = hjkm1;
      end
      adimat_push(tmpfra2_1, tmpfra2_2);
      tmpba1 = 0;
      if isequal(qk, 0)
         tmpba1 = 1;
         adimat_push1(hkkm1);
         hkkm1 = 0;
      else
         adimat_push1(hkkm1);
         hkkm1 = norm(qk);
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if k == m+1
         tmpba1 = 1;
         tmpba2 = 0;
         if m == n
            tmpba2 = 1;
            tmpba3 = 0;
            if hkkm1 > eps.*1e2
               tmpba3 = 1;
               warning('adimat:arnoldi:inaccurate', 'Large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            adimat_push1(tmpba3);
            tmpba3 = 0;
            if hkkm1 > eps.*1e4
               tmpba3 = 1;
               warning('adimat:arnoldi:failure', 'Very large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            adimat_push1(tmpba3);
         end
         adimat_push1(tmpba2);
      else
         tmpba2 = 0;
         if hkkm1 < eps
            tmpba2 = 1;
            warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
            tmplea1 = 1;
            tmpfra1_2 = k;
            break;
         end
         adimat_push1(tmpba2);
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if hkkm1==0 || k==m+1
         tmpba1 = 1;
         tmplea1 = 2;
         tmpfra1_2 = k;
         break;
      end
      adimat_push(tmpba1, qk);
      qk = qk ./ hkkm1;
      adimat_push1(H(k, k - 1));
      H(k, k - 1) = hkkm1;
      adimat_push1(Q(:, k));
      Q(:, k) = qk;
   end
   adimat_push(tmpfra1_1, tmpfra1_2, tmplea1, j, hjkm1, n, tmpda2, tmpda1, nexist, tmpca1, startInd, Q, H, hkkm1, A, m, qk);
end

function [a_A a_qk] = ret_adimat_arnoldi(a_Q, a_hkkm1)
   [qk m A hkkm1 H Q startInd tmpca1 nexist tmpda1 tmpda2 n hjkm1 j] = adimat_pop;
   [a_hjkm1 a_tmpca1 a_A a_qk] = a_zeros(hjkm1, tmpca1, A, qk);
   if nargin < 1
      a_Q = a_zeros1(Q);
   end
   if nargin < 2
      a_hkkm1 = a_zeros1(hkkm1);
   end
   [tmplea1 tmpfra1_2 tmpfra1_1] = adimat_pop;
   if tmplea1 == 1
      k = tmpfra1_2;
      tmpfra1_2 = tmpfra1_2 - 1;
      warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         hkkm1 = adimat_pop1;
         a_hkkm1 = a_zeros1(hkkm1);
      else
         hkkm1 = adimat_pop1;
         a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_hkkm1));
         a_hkkm1 = a_zeros1(hkkm1);
      end
      [tmpfra2_2 tmpfra2_1] = adimat_pop;
      for j=fliplr(tmpfra2_1 : tmpfra2_2)
         [H(j, k - 1) qk] = adimat_pop;
         a_tmpca1 = adimat_adjsum(a_tmpca1, -a_qk);
         tmpsa1 = a_qk;
         a_qk = a_zeros1(qk);
         a_qk = adimat_adjsum(a_qk, tmpsa1);
         tmpca1 = adimat_pop1;
         a_hjkm1 = adimat_adjsum(a_hjkm1, a_tmpca1 .* Q(:, j));
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), hjkm1 .* a_tmpca1);
         a_tmpca1 = a_zeros1(tmpca1);
         hjkm1 = adimat_pop1;
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), a_ctranspose(a_hjkm1 * qk.', Q(:, j)));
         a_qk = adimat_adjsum(a_qk, Q(:, j)'.' * a_hjkm1);
         a_hjkm1 = a_zeros1(hjkm1);
      end
      [j qk] = adimat_pop;
      a_A = adimat_adjsum(a_A, a_qk * qk.');
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, A.' * tmpsa1);
   end
   if tmplea1 == 2
      k = tmpfra1_2;
      tmpfra1_2 = tmpfra1_2 - 1;
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:failure', 'Very large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:inaccurate', 'Large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
         end
      else
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
         end
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         hkkm1 = adimat_pop1;
         a_hkkm1 = a_zeros1(hkkm1);
      else
         hkkm1 = adimat_pop1;
         a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_hkkm1));
         a_hkkm1 = a_zeros1(hkkm1);
      end
      [tmpfra2_2 tmpfra2_1] = adimat_pop;
      for j=fliplr(tmpfra2_1 : tmpfra2_2)
         [H(j, k - 1) qk] = adimat_pop;
         a_tmpca1 = adimat_adjsum(a_tmpca1, -a_qk);
         tmpsa1 = a_qk;
         a_qk = a_zeros1(qk);
         a_qk = adimat_adjsum(a_qk, tmpsa1);
         tmpca1 = adimat_pop1;
         a_hjkm1 = adimat_adjsum(a_hjkm1, a_tmpca1 .* Q(:, j));
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), hjkm1 .* a_tmpca1);
         a_tmpca1 = a_zeros1(tmpca1);
         hjkm1 = adimat_pop1;
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), a_ctranspose(a_hjkm1 * qk.', Q(:, j)));
         a_qk = adimat_adjsum(a_qk, Q(:, j)'.' * a_hjkm1);
         a_hjkm1 = a_zeros1(hjkm1);
      end
      [j qk] = adimat_pop;
      a_A = adimat_adjsum(a_A, a_qk * qk.');
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, A.' * tmpsa1);
   end
   for k=fliplr(tmpfra1_1 : tmpfra1_2)
      Q(:, k) = adimat_pop1;
      a_qk = adimat_adjsum(a_qk, adimat_adjreshape(qk, a_Q(:, k)));
      a_Q(:, k) = a_zeros1(Q(:, k));
      [H(k, k - 1) qk] = adimat_pop;
      a_hkkm1 = adimat_adjsum(a_hkkm1, -((qk./hkkm1 .* a_qk) ./ hkkm1));
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, tmpsa1 ./ hkkm1);
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:failure', 'Very large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
            tmpba3 = adimat_pop1;
            if tmpba3 == 1
               warning('adimat:arnoldi:inaccurate', 'Large error in Arnoldi iteration k=%d:%g', k, hkkm1);
            end
         end
      else
         tmpba2 = adimat_pop1;
         if tmpba2 == 1
            warning('adimat:arnoldi:breakdown', 'Breakdown in Arnoldi iteration at k=%d', k);
         end
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         hkkm1 = adimat_pop1;
         a_hkkm1 = a_zeros1(hkkm1);
      else
         hkkm1 = adimat_pop1;
         a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_hkkm1));
         a_hkkm1 = a_zeros1(hkkm1);
      end
      [tmpfra2_2 tmpfra2_1] = adimat_pop;
      for j=fliplr(tmpfra2_1 : tmpfra2_2)
         [H(j, k - 1) qk] = adimat_pop;
         a_tmpca1 = adimat_adjsum(a_tmpca1, -a_qk);
         tmpsa1 = a_qk;
         a_qk = a_zeros1(qk);
         a_qk = adimat_adjsum(a_qk, tmpsa1);
         tmpca1 = adimat_pop1;
         a_hjkm1 = adimat_adjsum(a_hjkm1, a_tmpca1 .* Q(:, j));
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), hjkm1 .* a_tmpca1);
         a_tmpca1 = a_zeros1(tmpca1);
         hjkm1 = adimat_pop1;
         a_Q(:, j) = adimat_adjsum(a_Q(:, j), a_ctranspose(a_hjkm1 * qk.', Q(:, j)));
         a_qk = adimat_adjsum(a_qk, Q(:, j)'.' * a_hjkm1);
         a_hjkm1 = a_zeros1(hjkm1);
      end
      [j qk] = adimat_pop;
      a_A = adimat_adjsum(a_A, a_qk * qk.');
      tmpsa1 = a_qk;
      a_qk = a_zeros1(qk);
      a_qk = adimat_adjsum(a_qk, A.' * tmpsa1);
   end
   qk = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, -((qk./tmpca1 .* a_qk) ./ tmpca1));
   tmpsa1 = a_qk;
   a_qk = a_zeros1(qk);
   a_qk = adimat_adjsum(a_qk, tmpsa1 ./ tmpca1);
   a_qk = adimat_adjsum(a_qk, a_adimat_norm1(qk, a_tmpca1));
   qk = adimat_pop1;
   tmpsa1 = a_qk;
   a_qk = a_zeros1(qk);
   a_qk(:, end) = adimat_adjsum(a_qk(:, end), tmpsa1);
   Q(:, 1 : nexist) = adimat_pop1;
   a_qk = adimat_adjsum(a_qk, adimat_adjreshape(qk, a_Q(:, 1 : nexist)));
   a_Q(:, 1 : nexist) = a_zeros1(Q(:, 1 : nexist));
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         qk = adimat_pop1;
         a_qk = a_zeros1(qk);
      else
         qk = adimat_pop1;
         a_qk = a_zeros1(qk);
         [tmpda1 tmpda2] = adimat_pop;
      end
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      m = adimat_pop1;
   end
end
% $Id: adimat_arnoldi.m 3980 2013-12-21 11:03:40Z willkomm $

function [a_c a_s nr_G] = a_mk_givens(c, s, n, i, j, a_G)
   G = speye(n);
   adimat_push1(G(i, i));
   G(i, i) = c;
   tmplia1 = conj(c);
   adimat_push1(G(j, j));
   G(j, j) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = -s;
   adimat_push1(G(i, j));
   G(i, j) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = conj(s);
   adimat_push1(G(j, i));
   G(j, i) = tmplia1;
   nr_G = G;
   [a_tmplia1 a_c a_s] = a_zeros(tmplia1, c, s);
   if nargin < 6
      a_G = a_zeros1(G);
   end
   G(j, i) = adimat_pop1;
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_G(j, i)));
   a_G(j, i) = a_zeros1(G(j, i));
   tmplia1 = adimat_pop1;
   a_s = adimat_adjsum(a_s, call(@conj, a_tmplia1));
   a_tmplia1 = a_zeros1(tmplia1);
   G(i, j) = adimat_pop1;
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_G(i, j)));
   a_G(i, j) = a_zeros1(G(i, j));
   tmplia1 = adimat_pop1;
   a_s = adimat_adjsum(a_s, -a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   G(j, j) = adimat_pop1;
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_G(j, j)));
   a_G(j, j) = a_zeros1(G(j, j));
   a_c = adimat_adjsum(a_c, call(@conj, a_tmplia1));
   G(i, i) = adimat_pop1;
   a_c = adimat_adjsum(a_c, adimat_adjreshape(c, a_G(i, i)));
   a_G(i, i) = a_zeros1(G(i, i));
end

function G = rec_mk_givens(c, s, n, i, j)
   G = speye(n);
   adimat_push1(G(i, i));
   G(i, i) = c;
   tmplia1 = conj(c);
   adimat_push1(G(j, j));
   G(j, j) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = -s;
   adimat_push1(G(i, j));
   G(i, j) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = conj(s);
   adimat_push1(G(j, i));
   G(j, i) = tmplia1;
   adimat_push(tmplia1, G, c, s);
   if nargin > 2
      adimat_push1(n);
   end
   if nargin > 3
      adimat_push1(i);
   end
   if nargin > 4
      adimat_push1(j);
   end
   adimat_push1(nargin);
end

function [a_c a_s] = ret_mk_givens(a_G)
   tmpnargin = adimat_pop1;
   if tmpnargin > 4
      j = adimat_pop1;
   end
   if tmpnargin > 3
      i = adimat_pop1;
   end
   if tmpnargin > 2
      n = adimat_pop1;
   end
   [s c G tmplia1] = adimat_pop;
   [a_tmplia1 a_c a_s] = a_zeros(tmplia1, c, s);
   if nargin < 1
      a_G = a_zeros1(G);
   end
   G(j, i) = adimat_pop1;
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_G(j, i)));
   a_G(j, i) = a_zeros1(G(j, i));
   tmplia1 = adimat_pop1;
   a_s = adimat_adjsum(a_s, call(@conj, a_tmplia1));
   a_tmplia1 = a_zeros1(tmplia1);
   G(i, j) = adimat_pop1;
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_G(i, j)));
   a_G(i, j) = a_zeros1(G(i, j));
   tmplia1 = adimat_pop1;
   a_s = adimat_adjsum(a_s, -a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   G(j, j) = adimat_pop1;
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjreshape(tmplia1, a_G(j, j)));
   a_G(j, j) = a_zeros1(G(j, j));
   a_c = adimat_adjsum(a_c, call(@conj, a_tmplia1));
   G(i, i) = adimat_pop1;
   a_c = adimat_adjsum(a_c, adimat_adjreshape(c, a_G(i, i)));
   a_G(i, i) = a_zeros1(G(i, i));
end
% $Id: mk_givens.m 4162 2014-05-12 07:34:49Z willkomm $
