% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: FORWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=x
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/d_adimat_expm.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: FORWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=x
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/d_adimat_expm.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: d_adimat_expm, d_padeExpm,
%  padeExpm, d_lesserPadeExpm, lesserPadeExpm
%

function [d_z z] = d_adimat_expm(d_x, x)
   [d_z z] = d_padeExpm(d_x, x);
end

function [d_R R] = d_padeExpm(d_A, A)
   U = [];
   d_U = d_zeros(U);
   V = [];
   d_V = d_zeros(V);
   s = [];
   tmpda1 = [];
   A2 = [];
   d_A2 = d_zeros(A2);
   A4 = [];
   d_A4 = d_zeros(A4);
   A6 = [];
   d_A6 = d_zeros(A6);
   tmpca3 = [];
   d_tmpca3 = d_zeros(tmpca3);
   tmpca2 = [];
   d_tmpca2 = d_zeros(tmpca2);
   tmpca1 = [];
   d_tmpca1 = d_zeros(tmpca1);
   W1 = [];
   d_W1 = d_zeros(W1);
   tmpda6 = [];
   tmpda5 = [];
   tmpca4 = [];
   d_tmpca4 = d_zeros(tmpca4);
   W2 = [];
   d_W2 = d_zeros(W2);
   Z1 = [];
   d_Z1 = d_zeros(Z1);
   Z2 = [];
   d_Z2 = d_zeros(Z2);
   W = [];
   d_W = d_zeros(W);
   global adimat_expm_fast;
   l = [2.11e-8 3.56e-4 1.08e-2 6.49e-2 2e-1 4.37e-1 7.83e-1 1.23 1.78 2.42 3.13 3.9 4.74 5.63 6.56 7.52 8.53 9.56 1.06e1 1.17e1];
   b = [64764752532480000 32382376266240000 7771770303897600 1187353796428800 129060195264000 10559470521600 670442572800 33522128640 1323241920 40840800 960960 16380 182 1];
   n1A = norm(A, 1);
   lesserM = false;
   if adimat_expm_fast
      for m=[3 5 7 9]
         if n1A < l(m)
            [d_U U d_V V] = d_lesserPadeExpm(d_A, A, m, b);
            s = 0;
            lesserM = true;
         end
      end
   end
   if ~lesserM
      s = max(ceil(log2(n1A / l(13))), 0);
      tmpda1 = 2 ^ s;
      d_A = adimat_opdiff_ediv_right(d_A, A, tmpda1);
      A = A ./ tmpda1;
      d_A2 = adimat_opdiff_mult(d_A, A, d_A, A);
      A2 = A * A;
      d_A4 = adimat_opdiff_mult(d_A2, A2, d_A2, A2);
      A4 = A2 * A2;
      d_A6 = adimat_opdiff_mult(d_A2, A2, d_A4, A4);
      A6 = A2 * A4;
      d_tmpca3 = adimat_opdiff_emult_left(b(10), d_A2, A2);
      tmpca3 = b(10) .* A2;
      d_tmpca2 = adimat_opdiff_emult_left(b(12), d_A4, A4);
      tmpca2 = b(12) .* A4;
      d_tmpca1 = adimat_opdiff_emult_left(b(14), d_A6, A6);
      tmpca1 = b(14) .* A6;
      d_W1 = adimat_opdiff_sum(d_tmpca1, d_tmpca2, d_tmpca3);
      W1 = tmpca1 + tmpca2 + tmpca3;
      tmpda6 = size(A);
      tmpda5 = eye(tmpda6);
      d_tmpca4 = adimat_opdiff_emult(d_zeros(b(2)), b(2), d_zeros(tmpda5), tmpda5);
      tmpca4 = b(2) .* tmpda5;
      d_tmpca3 = adimat_opdiff_emult_left(b(4), d_A2, A2);
      tmpca3 = b(4) .* A2;
      d_tmpca2 = adimat_opdiff_emult_left(b(6), d_A4, A4);
      tmpca2 = b(6) .* A4;
      d_tmpca1 = adimat_opdiff_emult_left(b(8), d_A6, A6);
      tmpca1 = b(8) .* A6;
      d_W2 = adimat_opdiff_sum(d_tmpca1, d_tmpca2, d_tmpca3, d_tmpca4);
      W2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      d_tmpca3 = adimat_opdiff_emult_left(b(9), d_A2, A2);
      tmpca3 = b(9) .* A2;
      d_tmpca2 = adimat_opdiff_emult_left(b(11), d_A4, A4);
      tmpca2 = b(11) .* A4;
      d_tmpca1 = adimat_opdiff_emult_left(b(13), d_A6, A6);
      tmpca1 = b(13) .* A6;
      d_Z1 = adimat_opdiff_sum(d_tmpca1, d_tmpca2, d_tmpca3);
      Z1 = tmpca1 + tmpca2 + tmpca3;
      tmpda6 = size(A);
      tmpda5 = eye(tmpda6);
      d_tmpca4 = adimat_opdiff_emult(d_zeros(b(1)), b(1), d_zeros(tmpda5), tmpda5);
      tmpca4 = b(1) .* tmpda5;
      d_tmpca3 = adimat_opdiff_emult_left(b(3), d_A2, A2);
      tmpca3 = b(3) .* A2;
      d_tmpca2 = adimat_opdiff_emult_left(b(5), d_A4, A4);
      tmpca2 = b(5) .* A4;
      d_tmpca1 = adimat_opdiff_emult_left(b(7), d_A6, A6);
      tmpca1 = b(7) .* A6;
      d_Z2 = adimat_opdiff_sum(d_tmpca1, d_tmpca2, d_tmpca3, d_tmpca4);
      Z2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      d_tmpca1 = adimat_opdiff_mult(d_A6, A6, d_W1, W1);
      tmpca1 = A6 * W1;
      d_W = adimat_opdiff_sum(d_tmpca1, d_W2);
      W = tmpca1 + W2;
      d_U = adimat_opdiff_mult(d_A, A, d_W, W);
      U = A * W;
      d_tmpca1 = adimat_opdiff_mult(d_A6, A6, d_Z1, Z1);
      tmpca1 = A6 * Z1;
      d_V = adimat_opdiff_sum(d_tmpca1, d_Z2);
      V = tmpca1 + Z2;
   end
   d_tmpca2 = adimat_opdiff_sum(d_U, d_V);
   tmpca2 = U + V;
   d_tmpca1 = adimat_opdiff_sum(-d_U, d_V);
   tmpca1 = -U + V;
   d_R = adimat_opdiff_sol(d_tmpca1, tmpca1, d_tmpca2, tmpca2);
   R = tmpca1 \ tmpca2;
   for i=1 : s
      d_R = adimat_opdiff_mult(d_R, R, d_R, R);
      R = R * R;
   end
end

function R = padeExpm(A)
   U = [];
   V = [];
   s = [];
   tmpda1 = [];
   A2 = [];
   A4 = [];
   A6 = [];
   tmpca3 = [];
   tmpca2 = [];
   tmpca1 = [];
   W1 = [];
   tmpda6 = [];
   tmpda5 = [];
   tmpca4 = [];
   W2 = [];
   Z1 = [];
   Z2 = [];
   W = [];
   global adimat_expm_fast;
   l = [2.11e-8 3.56e-4 1.08e-2 6.49e-2 2e-1 4.37e-1 7.83e-1 1.23 1.78 2.42 3.13 3.9 4.74 5.63 6.56 7.52 8.53 9.56 1.06e1 1.17e1];
   b = [64764752532480000 32382376266240000 7771770303897600 1187353796428800 129060195264000 10559470521600 670442572800 33522128640 1323241920 40840800 960960 16380 182 1];
   n1A = norm(A, 1);
   lesserM = false;
   if adimat_expm_fast
      for m=[3 5 7 9]
         if n1A < l(m)
            [U V] = lesserPadeExpm(A, m, b);
            s = 0;
            lesserM = true;
         end
      end
   end
   if ~lesserM
      s = max(ceil(log2(n1A / l(13))), 0);
      tmpda1 = 2 ^ s;
      A = A ./ tmpda1;
      A2 = A * A;
      A4 = A2 * A2;
      A6 = A2 * A4;
      tmpca3 = b(10) .* A2;
      tmpca2 = b(12) .* A4;
      tmpca1 = b(14) .* A6;
      W1 = tmpca1 + tmpca2 + tmpca3;
      tmpda6 = size(A);
      tmpda5 = eye(tmpda6);
      tmpca4 = b(2) .* tmpda5;
      tmpca3 = b(4) .* A2;
      tmpca2 = b(6) .* A4;
      tmpca1 = b(8) .* A6;
      W2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      tmpca3 = b(9) .* A2;
      tmpca2 = b(11) .* A4;
      tmpca1 = b(13) .* A6;
      Z1 = tmpca1 + tmpca2 + tmpca3;
      tmpda6 = size(A);
      tmpda5 = eye(tmpda6);
      tmpca4 = b(1) .* tmpda5;
      tmpca3 = b(3) .* A2;
      tmpca2 = b(5) .* A4;
      tmpca1 = b(7) .* A6;
      Z2 = tmpca1 + tmpca2 + tmpca3 + tmpca4;
      tmpca1 = A6 * W1;
      W = tmpca1 + W2;
      U = A * W;
      tmpca1 = A6 * Z1;
      V = tmpca1 + Z2;
   end
   tmpca2 = U + V;
   tmpca1 = -U + V;
   R = tmpca1 \ tmpca2;
   for i=1 : s
      R = R * R;
   end
end

function [d_U U d_V V] = d_lesserPadeExpm(d_A, A, m, b)
   tmpda3 = [];
   tmpca1 = [];
   d_tmpca1 = d_zeros(tmpca1);
   top = (m - 1) ./ 2;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   d_V = adimat_opdiff_emult(d_zeros(b(1)), b(1), d_zeros(tmpda1), tmpda1);
   V = b(1) .* tmpda1;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   d_U = adimat_opdiff_emult(d_zeros(b(2)), b(2), d_zeros(tmpda1), tmpda1);
   U = b(2) .* tmpda1;
   d_A2 = adimat_opdiff_mult(d_A, A, d_A, A);
   A2 = A * A;
   d_X = d_A2;
   X = A2;
   for k=1 : top
      tmpda3 = 2 * k;
      tmpda2 = tmpda3 + 1;
      d_tmpca1 = adimat_opdiff_emult_left(b(tmpda2), d_X, X);
      tmpca1 = b(tmpda2) .* X;
      d_V = adimat_opdiff_sum(d_V, d_tmpca1);
      V = V + tmpca1;
      tmpda3 = 2 * k;
      tmpda2 = tmpda3 + 2;
      d_tmpca1 = adimat_opdiff_emult_left(b(tmpda2), d_X, X);
      tmpca1 = b(tmpda2) .* X;
      d_U = adimat_opdiff_sum(d_U, d_tmpca1);
      U = U + tmpca1;
      d_X = adimat_opdiff_mult(d_X, X, d_A2, A2);
      X = X * A2;
   end
   d_U = adimat_opdiff_mult(d_A, A, d_U, U);
   U = A * U;
end
% $Id: adimat_expm.m 3673 2013-05-27 12:17:48Z willkomm $

function [U V] = lesserPadeExpm(A, m, b)
   tmpda3 = [];
   tmpca1 = [];
   top = (m - 1) ./ 2;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   V = b(1) .* tmpda1;
   tmpda2 = size(A);
   tmpda1 = eye(tmpda2);
   U = b(2) .* tmpda1;
   A2 = A * A;
   X = A2;
   for k=1 : top
      tmpda3 = 2 * k;
      tmpda2 = tmpda3 + 1;
      tmpca1 = b(tmpda2) .* X;
      V = V + tmpca1;
      tmpda3 = 2 * k;
      tmpda2 = tmpda3 + 2;
      tmpca1 = b(tmpda2) .* X;
      U = U + tmpca1;
      X = X * A2;
   end
   U = A * U;
end
% $Id: adimat_expm.m 3673 2013-05-27 12:17:48Z willkomm $
