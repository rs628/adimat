% Generated by ADiMat 0.6.0-4867
% Copyright 2009-2013 Johannes Willkomm, Fachgebiet Scientific Computing,
% TU Darmstadt, 64289 Darmstadt, Germany
% Copyright 2001-2008 Andre Vehreschild, Institute for Scientific Computing,
% RWTH Aachen University, 52056 Aachen, Germany.
% Visit us on the web at http://www.adimat.de
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%
%                             DISCLAIMER
%
% ADiMat was prepared as part of an employment at the Institute
% for Scientific Computing, RWTH Aachen University, Germany and is
% provided AS IS. NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL
% REPUBLIC OF GERMANY NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY,
% EXPRESS OR IMPLIED, OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY
% FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY INFORMATION OR
% PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE WOULD NOT INFRINGE
% PRIVATELY OWNED RIGHTS.
%
% Global flags were:
% FORWARDMODE -- Apply the forward mode to the files.
% NOOPEROPTIM -- Do not use optimized operators. I.e.:
%		 g_a*b*g_c -/-> mtimes3(g_a, b, g_c)
% NOLOCALCSE  -- Do not use local common subexpression elimination when
%		 canonicalizing the code.
% NOGLOBALCSE -- Prevents the application of global common subexpression
%		 elimination after canonicalizing the code.
% NOPRESCALARFOLDING -- Switch off folding of scalar constants before
%		 augmentation.
% NOPOSTSCALARFOLDING -- Switch off folding of scalar constants after
%		 augmentation.
% NOCONSTFOLDMULT0 -- Switch off folding of product with one factor
%		 being zero: b*0=0.
% FUNCMODE    -- Inputfile is a function (This flag can not be set explicitly).
% NOTMPCLEAR  -- Suppress generation of clear g_* instructions.
% UNBOUND_ERROR	-- Stop with error if unbound identifiers found (default).
% VERBOSITYLEVEL=4
% AD_IVARS= a, b
% AD_DVARS= z

% function [z] = adimat_mpower(a, b)
%
% Compute z = a ^ b. This is a re-implementation of the mpower
% builtin to be differentiated with ADiMat.
%
% see also adimat_expm
%
% This file is part of the ADiMat runtime environment
%
% Copyright 2014 Johannes Willkomm
%
function [g_z, z]= g_adimat_mpower(g_a, a, g_b, b)
   if isscalar(a)&& isscalar(b)
      z= a.^ b; 
      g_z= (g_b.* log(a)+ b.* g_a./ a).* z;
   elseif isscalar(a)
      g_tmp_log_00000= g_a./ a;
      tmp_log_00000= log(a);
      g_tmp_adimat_mpower_00000= g_b.* tmp_log_00000+ b.* g_tmp_log_00000;
      tmp_adimat_mpower_00000= b.* tmp_log_00000;
      [g_z, z]= g_adimat_expm(g_tmp_adimat_mpower_00000, tmp_adimat_mpower_00000); 
   else 
      [g_tmp_logm_00000, tmp_logm_00000]= g_logm(g_a, a);
      g_tmp_adimat_mpower_00001= g_b.* tmp_logm_00000+ b.* g_tmp_logm_00000;
      tmp_adimat_mpower_00001= b.* tmp_logm_00000;
      [g_z, z]= g_adimat_expm(g_tmp_adimat_mpower_00001, tmp_adimat_mpower_00001); 
   end
end

% $Id: adimat_mpower.m 4571 2014-06-20 18:30:53Z willkomm $
