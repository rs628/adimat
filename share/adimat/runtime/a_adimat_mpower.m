% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a, b
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_mpower.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a, b
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_mpower.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: a_adimat_mpower, rec_adimat_mpower,
%  ret_adimat_mpower
%

function [a_a a_b nr_z] = a_adimat_mpower(a, b, a_z)
   tmpca2 = 0;
   tmpca1 = 0;
   z = 0;
   tmpba1 = 0;
   if isscalar(a) && isscalar(b)
      tmpba1 = 1;
      adimat_push1(z);
      z = a .^ b;
   elseif isscalar(a)
      tmpba1 = 2;
      adimat_push1(tmpca2);
      tmpca2 = log(a);
      adimat_push1(tmpca1);
      tmpca1 = b .* tmpca2;
      adimat_push1(z);
      z = expm(tmpca1);
   else
      adimat_push1(tmpca2);
      tmpca2 = logm(a);
      adimat_push1(tmpca1);
      tmpca1 = b .* tmpca2;
      adimat_push1(z);
      z = expm(tmpca1);
   end
   adimat_push1(tmpba1);
   nr_z = z;
   [a_tmpca2 a_tmpca1 a_a a_b] = a_zeros(tmpca2, tmpca1, a, b);
   if nargin < 3
      a_z = a_zeros1(z);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      z = adimat_pop1;
      a_a = adimat_adjsum(a_a, b .* a.^(b - 1) .* a_z);
      a_b = adimat_adjsum(a_b, a.^b .* log(a) .* a_z);
      a_z = a_zeros1(z);
   elseif tmpba1 == 2
      z = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_adimat_expm(tmpca1, a_z));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_b = adimat_adjsum(a_b, a_tmpca1 .* tmpca2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, b .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_a = adimat_adjsum(a_a, a_tmpca2 ./ a);
      a_tmpca2 = a_zeros1(tmpca2);
   else
      z = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_adimat_expm(tmpca1, a_z));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_b = adimat_adjsum(a_b, a_tmpca1 .* tmpca2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, b .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_a = adimat_adjsum(a_a, a_logm(a_tmpca2, a));
      a_tmpca2 = a_zeros1(tmpca2);
   end
end

function z = rec_adimat_mpower(a, b)
   tmpca2 = 0;
   tmpca1 = 0;
   z = 0;
   tmpba1 = 0;
   if isscalar(a) && isscalar(b)
      tmpba1 = 1;
      adimat_push1(z);
      z = a .^ b;
   elseif isscalar(a)
      tmpba1 = 2;
      adimat_push1(tmpca2);
      tmpca2 = log(a);
      adimat_push1(tmpca1);
      tmpca1 = b .* tmpca2;
      adimat_push1(z);
      z = expm(tmpca1);
   else
      adimat_push1(tmpca2);
      tmpca2 = logm(a);
      adimat_push1(tmpca1);
      tmpca1 = b .* tmpca2;
      adimat_push1(z);
      z = expm(tmpca1);
   end
   adimat_push(tmpba1, tmpca2, tmpca1, z, a, b);
end

function [a_a a_b] = ret_adimat_mpower(a_z)
   [b a z tmpca1 tmpca2] = adimat_pop;
   [a_tmpca2 a_tmpca1 a_a a_b] = a_zeros(tmpca2, tmpca1, a, b);
   if nargin < 1
      a_z = a_zeros1(z);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      z = adimat_pop1;
      a_a = adimat_adjsum(a_a, b .* a.^(b - 1) .* a_z);
      a_b = adimat_adjsum(a_b, a.^b .* log(a) .* a_z);
      a_z = a_zeros1(z);
   elseif tmpba1 == 2
      z = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_adimat_expm(tmpca1, a_z));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_b = adimat_adjsum(a_b, a_tmpca1 .* tmpca2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, b .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_a = adimat_adjsum(a_a, a_tmpca2 ./ a);
      a_tmpca2 = a_zeros1(tmpca2);
   else
      z = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_adimat_expm(tmpca1, a_z));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_b = adimat_adjsum(a_b, a_tmpca1 .* tmpca2);
      a_tmpca2 = adimat_adjsum(a_tmpca2, b .* a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_a = adimat_adjsum(a_a, a_logm(a_tmpca2, a));
      a_tmpca2 = a_zeros1(tmpca2);
   end
end
% $Id: adimat_mpower.m 4571 2014-06-20 18:30:53Z willkomm $
