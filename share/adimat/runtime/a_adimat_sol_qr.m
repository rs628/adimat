% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a, b
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_sol_qr.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a, b
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_sol_qr.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: a_adimat_sol_qr, rec_adimat_sol_qr,
%  ret_adimat_sol_qr
%

function [a_a a_b nr_z] = a_adimat_sol_qr(a, b, a_z)
   tmpda3 = 0;
   tmpda2 = 0;
   tmpda1 = 0;
   tmpda4 = 0;
   tmpca1 = 0;
   z = 0;
   q = 0;
   r = 0;
   r1 = 0;
   t = 0;
   q1 = 0;
   [m n] = size(a);
   tmpba1 = 0;
   if m < n
      tmpba1 = 1;
      adimat_push(q, r);
      [q r] = qr(a');
      adimat_push1(r1);
      r1 = r(1 : m, :);
      adimat_push1(tmpda3);
      tmpda3 = true;
      adimat_push1(tmpda2);
      tmpda2 = true;
      adimat_push1(tmpda1);
      tmpda1 = struct('UT', tmpda2, 'TRANSA', tmpda3);
      adimat_push1(t);
      t = linsolve(r1, b, tmpda1);
      adimat_push1(tmpda4);
      tmpda4 = size(b, 2);
      adimat_push1(tmpda3);
      tmpda3 = n - m;
      adimat_push1(tmpda2);
      tmpda2 = zeros(tmpda3, tmpda4);
      adimat_push1(tmpca1);
      tmpca1 = [t
            tmpda2];
      adimat_push1(z);
      z = q * tmpca1;
   else
      adimat_push(q, r);
      [q r] = qr(a);
      adimat_push1(q1);
      q1 = q(:, 1 : n);
      adimat_push1(r1);
      r1 = r(1 : n, :);
      adimat_push1(tmpda3);
      tmpda3 = true;
      adimat_push1(tmpda2);
      tmpda2 = struct('UT', tmpda3);
      adimat_push1(tmpca1);
      tmpca1 = q1' * b;
      adimat_push1(z);
      z = linsolve(r1, tmpca1, tmpda2);
   end
   adimat_push1(tmpba1);
   nr_z = z;
   [a_q a_r a_r1 a_t a_q1 a_tmpca1 a_a a_b] = a_zeros(q, r, r1, t, q1, tmpca1, a, b);
   if nargin < 3
      a_z = a_zeros1(z);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      z = adimat_pop1;
      a_q = adimat_adjsum(a_q, adimat_adjmultl(q, a_z, tmpca1));
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, q, a_z));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_t = adimat_adjsum(a_t, a_vertcat(a_tmpca1, t));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3 tmpda4 t] = adimat_pop;
      a_r1 = adimat_adjsum(a_r1, a_linsolve1(a_t, r1, b, tmpda1));
      a_b = adimat_adjsum(a_b, a_linsolve2(a_t, r1, b, tmpda1));
      a_t = a_zeros1(t);
      [tmpda1 tmpda2 tmpda3 r1] = adimat_pop;
      a_r(1 : m, :) = adimat_adjsum(a_r(1 : m, :), a_r1);
      a_r1 = a_zeros1(r1);
      [r q] = adimat_pop;
      a_a = adimat_adjsum(a_a, a_ctranspose(a_adimat_qr(a', a_q, a_r), a));
      [a_r a_q] = a_zeros(r, q);
   else
      z = adimat_pop1;
      a_r1 = adimat_adjsum(a_r1, a_linsolve1(a_z, r1, tmpca1, tmpda2));
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_linsolve2(a_z, r1, tmpca1, tmpda2));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_q1 = adimat_adjsum(a_q1, a_ctranspose(adimat_adjmultl(q1', a_tmpca1, b), q1));
      a_b = adimat_adjsum(a_b, adimat_adjmultr(b, q1', a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3 r1] = adimat_pop;
      a_r(1 : n, :) = adimat_adjsum(a_r(1 : n, :), a_r1);
      a_r1 = a_zeros1(r1);
      q1 = adimat_pop1;
      a_q(:, 1 : n) = adimat_adjsum(a_q(:, 1 : n), a_q1);
      a_q1 = a_zeros1(q1);
      [r q] = adimat_pop;
      a_a = adimat_adjsum(a_a, a_adimat_qr(a, a_q, a_r));
      [a_r a_q] = a_zeros(r, q);
   end
end

function z = rec_adimat_sol_qr(a, b)
   tmpda3 = 0;
   tmpda2 = 0;
   tmpda1 = 0;
   tmpda4 = 0;
   tmpca1 = 0;
   z = 0;
   q = 0;
   r = 0;
   r1 = 0;
   t = 0;
   q1 = 0;
   [m n] = size(a);
   tmpba1 = 0;
   if m < n
      tmpba1 = 1;
      adimat_push(q, r);
      [q r] = qr(a');
      adimat_push1(r1);
      r1 = r(1 : m, :);
      adimat_push1(tmpda3);
      tmpda3 = true;
      adimat_push1(tmpda2);
      tmpda2 = true;
      adimat_push1(tmpda1);
      tmpda1 = struct('UT', tmpda2, 'TRANSA', tmpda3);
      adimat_push1(t);
      t = linsolve(r1, b, tmpda1);
      adimat_push1(tmpda4);
      tmpda4 = size(b, 2);
      adimat_push1(tmpda3);
      tmpda3 = n - m;
      adimat_push1(tmpda2);
      tmpda2 = zeros(tmpda3, tmpda4);
      adimat_push1(tmpca1);
      tmpca1 = [t
            tmpda2];
      adimat_push1(z);
      z = q * tmpca1;
   else
      adimat_push(q, r);
      [q r] = qr(a);
      adimat_push1(q1);
      q1 = q(:, 1 : n);
      adimat_push1(r1);
      r1 = r(1 : n, :);
      adimat_push1(tmpda3);
      tmpda3 = true;
      adimat_push1(tmpda2);
      tmpda2 = struct('UT', tmpda3);
      adimat_push1(tmpca1);
      tmpca1 = q1' * b;
      adimat_push1(z);
      z = linsolve(r1, tmpca1, tmpda2);
   end
   adimat_push(tmpba1, q, r, r1, t, q1, m, n, tmpda3, tmpda2, tmpda1, tmpda4, tmpca1, z, a, b);
end

function [a_a a_b] = ret_adimat_sol_qr(a_z)
   [b a z tmpca1 tmpda4 tmpda1 tmpda2 tmpda3 n m q1 t r1 r q] = adimat_pop;
   [a_q a_r a_r1 a_t a_q1 a_tmpca1 a_a a_b] = a_zeros(q, r, r1, t, q1, tmpca1, a, b);
   if nargin < 1
      a_z = a_zeros1(z);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      z = adimat_pop1;
      a_q = adimat_adjsum(a_q, adimat_adjmultl(q, a_z, tmpca1));
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, q, a_z));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_t = adimat_adjsum(a_t, a_vertcat(a_tmpca1, t));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3 tmpda4 t] = adimat_pop;
      a_r1 = adimat_adjsum(a_r1, a_linsolve1(a_t, r1, b, tmpda1));
      a_b = adimat_adjsum(a_b, a_linsolve2(a_t, r1, b, tmpda1));
      a_t = a_zeros1(t);
      [tmpda1 tmpda2 tmpda3 r1] = adimat_pop;
      a_r(1 : m, :) = adimat_adjsum(a_r(1 : m, :), a_r1);
      a_r1 = a_zeros1(r1);
      [r q] = adimat_pop;
      a_a = adimat_adjsum(a_a, a_ctranspose(a_adimat_qr(a', a_q, a_r), a));
      [a_r a_q] = a_zeros(r, q);
   else
      z = adimat_pop1;
      a_r1 = adimat_adjsum(a_r1, a_linsolve1(a_z, r1, tmpca1, tmpda2));
      a_tmpca1 = adimat_adjsum(a_tmpca1, a_linsolve2(a_z, r1, tmpca1, tmpda2));
      a_z = a_zeros1(z);
      tmpca1 = adimat_pop1;
      a_q1 = adimat_adjsum(a_q1, a_ctranspose(adimat_adjmultl(q1', a_tmpca1, b), q1));
      a_b = adimat_adjsum(a_b, adimat_adjmultr(b, q1', a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3 r1] = adimat_pop;
      a_r(1 : n, :) = adimat_adjsum(a_r(1 : n, :), a_r1);
      a_r1 = a_zeros1(r1);
      q1 = adimat_pop1;
      a_q(:, 1 : n) = adimat_adjsum(a_q(:, 1 : n), a_q1);
      a_q1 = a_zeros1(q1);
      [r q] = adimat_pop;
      a_a = adimat_adjsum(a_a, a_adimat_qr(a, a_q, a_r));
      [a_r a_q] = a_zeros(r, q);
   end
end
