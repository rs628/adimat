% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a, b
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_sol_ata.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=z
%  - independents=a, b
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_sol_ata.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: a_adimat_sol_ata, rec_adimat_sol_ata,
%  ret_adimat_sol_ata
%

function [a_a a_b nr_z] = a_adimat_sol_ata(a, b, a_z)
   L = a';
   tmpca2 = L * b;
   tmpca1 = L * a;
   z = linsolve(tmpca1, tmpca2);
   nr_z = z;
   [a_L a_tmpca2 a_tmpca1 a_a a_b] = a_zeros(L, tmpca2, tmpca1, a, b);
   if nargin < 3
      a_z = a_zeros1(z);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_linsolve1(a_z, tmpca1, tmpca2));
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_linsolve2(a_z, tmpca1, tmpca2));
   a_L = adimat_adjsum(a_L, adimat_adjmultl(L, a_tmpca1, a));
   a_a = adimat_adjsum(a_a, adimat_adjmultr(a, L, a_tmpca1));
   a_L = adimat_adjsum(a_L, adimat_adjmultl(L, a_tmpca2, b));
   a_b = adimat_adjsum(a_b, adimat_adjmultr(b, L, a_tmpca2));
   a_a = adimat_adjsum(a_a, a_ctranspose(a_L, a));
end

function z = rec_adimat_sol_ata(a, b)
   L = a';
   tmpca2 = L * b;
   tmpca1 = L * a;
   z = linsolve(tmpca1, tmpca2);
   adimat_push(L, tmpca2, tmpca1, z, a, b);
end

function [a_a a_b] = ret_adimat_sol_ata(a_z)
   [b a z tmpca1 tmpca2 L] = adimat_pop;
   [a_L a_tmpca2 a_tmpca1 a_a a_b] = a_zeros(L, tmpca2, tmpca1, a, b);
   if nargin < 1
      a_z = a_zeros1(z);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_linsolve1(a_z, tmpca1, tmpca2));
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_linsolve2(a_z, tmpca1, tmpca2));
   a_L = adimat_adjsum(a_L, adimat_adjmultl(L, a_tmpca1, a));
   a_a = adimat_adjsum(a_a, adimat_adjmultr(a, L, a_tmpca1));
   a_L = adimat_adjsum(a_L, adimat_adjmultl(L, a_tmpca2, b));
   a_b = adimat_adjsum(a_b, adimat_adjmultr(b, L, a_tmpca2));
   a_a = adimat_adjsum(a_a, a_ctranspose(a_L, a));
end
