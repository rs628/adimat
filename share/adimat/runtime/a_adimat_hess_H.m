% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=H
%  - independents=A
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_hess_H.m
%  - output-file-prefix: 
%  - output-directory: ad_out
% Generated by ADiMat 0.6.0-4867
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  PARSE_ONLY,
%   UNBOUND_ERROR
%
% Parameters:
%  - dependents=H
%  - independents=A
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: ad_out/a_adimat_hess_H.m
%  - output-file-prefix: 
%  - output-directory: ad_out
%
% Functions in this file: a_adimat_hess_H, rec_adimat_hess_H,
%  ret_adimat_hess_H, a_mk_householder_elim, rec_mk_householder_elim,
%  ret_mk_householder_elim, a_mk_householder_elim_vec_lapack, rec_mk_householder_elim_vec_lapack,
%  ret_mk_householder_elim_vec_lapack
%

function [a_A nr_H] = a_adimat_hess_H(A, a_H)
   tmpca1 = 0;
   tmpca2 = 0;
   tmpca4 = 0;
   tmpca3 = 0;
   Pk = 0;
   n = size(A, 1);
   H = A;
   tmpfra1_2 = n - 1;
   for k=1 : tmpfra1_2
      adimat_push1(Pk);
      Pk = rec_mk_householder_elim(H, k + 1, k);
      adimat_push1(tmpca1);
      tmpca1 = Pk' * H;
      adimat_push1(H);
      H = tmpca1 * Pk;
   end
   adimat_push1(tmpfra1_2);
   tmpba1 = 0;
   if adimat_issymmetric(H)
      tmpba1 = 1;
      adimat_push1(tmpca2);
      tmpca2 = real(H);
      adimat_push1(tmpca1);
      tmpca1 = triu(tmpca2, -1);
      adimat_push1(H);
      H = tril(tmpca1, 1);
   else
      adimat_push1(tmpca4);
      tmpca4 = tril(H, -1);
      adimat_push1(tmpca3);
      tmpca3 = triu(tmpca4, -1);
      adimat_push1(tmpca2);
      tmpca2 = real(tmpca3);
      adimat_push1(tmpca1);
      tmpca1 = triu(H);
      adimat_push1(H);
      H = tmpca1 + tmpca2;
   end
   adimat_push1(tmpba1);
   nr_H = H;
   [a_Pk a_tmpca1 a_tmpca2 a_tmpca4 a_tmpca3 a_A] = a_zeros(Pk, tmpca1, tmpca2, tmpca4, tmpca3, A);
   if nargin < 2
      a_H = a_zeros1(H);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      H = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, call(@tril, a_H, 1));
      a_H = a_zeros1(H);
      tmpca1 = adimat_pop1;
      a_tmpca2 = adimat_adjsum(a_tmpca2, call(@triu, a_tmpca1, -1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_H = adimat_adjsum(a_H, call(@real, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
   else
      H = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_H));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_H));
      a_H = a_zeros1(H);
      tmpca1 = adimat_pop1;
      a_H = adimat_adjsum(a_H, call(@triu, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_tmpca3 = adimat_adjsum(a_tmpca3, call(@real, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, call(@triu, a_tmpca3, -1));
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_H = adimat_adjsum(a_H, call(@tril, a_tmpca4, -1));
      a_tmpca4 = a_zeros1(tmpca4);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      H = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_H, Pk));
      a_Pk = adimat_adjsum(a_Pk, adimat_adjmultr(Pk, tmpca1, a_H));
      a_H = a_zeros1(H);
      tmpca1 = adimat_pop1;
      a_Pk = adimat_adjsum(a_Pk, a_ctranspose(adimat_adjmultl(Pk', a_tmpca1, H), Pk));
      a_H = adimat_adjsum(a_H, adimat_adjmultr(H, Pk', a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpadjc1] = ret_mk_householder_elim(a_Pk);
      Pk = adimat_pop1;
      a_H = adimat_adjsum(a_H, tmpadjc1);
      a_Pk = a_zeros1(Pk);
   end
   a_A = adimat_adjsum(a_A, a_H);
end

function H = rec_adimat_hess_H(A)
   tmpca1 = 0;
   tmpca2 = 0;
   tmpca4 = 0;
   tmpca3 = 0;
   Pk = 0;
   n = size(A, 1);
   H = A;
   tmpfra1_2 = n - 1;
   for k=1 : tmpfra1_2
      adimat_push1(Pk);
      Pk = rec_mk_householder_elim(H, k + 1, k);
      adimat_push1(tmpca1);
      tmpca1 = Pk' * H;
      adimat_push1(H);
      H = tmpca1 * Pk;
   end
   adimat_push1(tmpfra1_2);
   tmpba1 = 0;
   if adimat_issymmetric(H)
      tmpba1 = 1;
      adimat_push1(tmpca2);
      tmpca2 = real(H);
      adimat_push1(tmpca1);
      tmpca1 = triu(tmpca2, -1);
      adimat_push1(H);
      H = tril(tmpca1, 1);
   else
      adimat_push1(tmpca4);
      tmpca4 = tril(H, -1);
      adimat_push1(tmpca3);
      tmpca3 = triu(tmpca4, -1);
      adimat_push1(tmpca2);
      tmpca2 = real(tmpca3);
      adimat_push1(tmpca1);
      tmpca1 = triu(H);
      adimat_push1(H);
      H = tmpca1 + tmpca2;
   end
   adimat_push(tmpba1, Pk, n, tmpca1, tmpca2, tmpca4, tmpca3, H, A);
end

function a_A = ret_adimat_hess_H(a_H)
   [A H tmpca3 tmpca4 tmpca2 tmpca1 n Pk] = adimat_pop;
   [a_Pk a_tmpca1 a_tmpca2 a_tmpca4 a_tmpca3 a_A] = a_zeros(Pk, tmpca1, tmpca2, tmpca4, tmpca3, A);
   if nargin < 1
      a_H = a_zeros1(H);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      H = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, call(@tril, a_H, 1));
      a_H = a_zeros1(H);
      tmpca1 = adimat_pop1;
      a_tmpca2 = adimat_adjsum(a_tmpca2, call(@triu, a_tmpca1, -1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_H = adimat_adjsum(a_H, call(@real, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
   else
      H = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_H));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_H));
      a_H = a_zeros1(H);
      tmpca1 = adimat_pop1;
      a_H = adimat_adjsum(a_H, call(@triu, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_tmpca3 = adimat_adjsum(a_tmpca3, call(@real, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, call(@triu, a_tmpca3, -1));
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_H = adimat_adjsum(a_H, call(@tril, a_tmpca4, -1));
      a_tmpca4 = a_zeros1(tmpca4);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      H = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_H, Pk));
      a_Pk = adimat_adjsum(a_Pk, adimat_adjmultr(Pk, tmpca1, a_H));
      a_H = a_zeros1(H);
      tmpca1 = adimat_pop1;
      a_Pk = adimat_adjsum(a_Pk, a_ctranspose(adimat_adjmultl(Pk', a_tmpca1, H), Pk));
      a_H = adimat_adjsum(a_H, adimat_adjmultr(H, Pk', a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpadjc1] = ret_mk_householder_elim(a_Pk);
      Pk = adimat_pop1;
      a_H = adimat_adjsum(a_H, tmpadjc1);
      a_Pk = a_zeros1(Pk);
   end
   a_A = adimat_adjsum(a_A, a_H);
end
% $Id: adimat_hess_H.m 3865 2013-09-19 15:57:49Z willkomm $

function [a_A nr_Pk] = a_mk_householder_elim(A, i, j, a_Pk)
   n = size(A, 1);
   uk = A(i : n, j);
   Pk = rec_mk_householder_elim_vec_lapack(uk, n);
   nr_Pk = Pk;
   [a_uk a_A] = a_zeros(uk, A);
   if nargin < 4
      a_Pk = a_zeros1(Pk);
   end
   [tmpadjc1] = ret_mk_householder_elim_vec_lapack(a_Pk);
   a_uk = adimat_adjsum(a_uk, tmpadjc1);
   a_A(i : n, j) = adimat_adjsum(a_A(i : n, j), a_uk);
end

function Pk = rec_mk_householder_elim(A, i, j)
   n = size(A, 1);
   uk = A(i : n, j);
   Pk = rec_mk_householder_elim_vec_lapack(uk, n);
   adimat_push(n, uk, Pk, A);
   if nargin > 1
      adimat_push1(i);
   end
   if nargin > 2
      adimat_push1(j);
   end
   adimat_push1(nargin);
end

function a_A = ret_mk_householder_elim(a_Pk)
   tmpnargin = adimat_pop1;
   if tmpnargin > 2
      j = adimat_pop1;
   end
   if tmpnargin > 1
      i = adimat_pop1;
   end
   [A Pk uk n] = adimat_pop;
   [a_uk a_A] = a_zeros(uk, A);
   if nargin < 1
      a_Pk = a_zeros1(Pk);
   end
   [tmpadjc1] = ret_mk_householder_elim_vec_lapack(a_Pk);
   a_uk = adimat_adjsum(a_uk, tmpadjc1);
   a_A(i : n, j) = adimat_adjsum(a_A(i : n, j), a_uk);
end
% $Id%

function [a_a nr_Pk nr_u] = a_mk_householder_elim_vec_lapack(a, n, a_Pk, a_u)
   tmplia1 = 0;
   tmpca1 = 0;
   tmpca3 = 0;
   tmpda2 = 0;
   u = 0;
   na_rest = 0;
   sa1 = 0;
   nu = 0;
   sigma = 0;
   Pksub = 0;
   tolZ = eps;
   assert(iscolumn(a));
   tmpca2 = a(1) .* 0;
   tmpda1 = eye(n);
   Pk = tmpda1 + tmpca2;
   k = length(a);
   na = norm(a);
   tmpba1 = 0;
   if ~(k==1 && isreal(a)) && na~=0
      tmpba1 = 1;
      adimat_push1(u);
      u = a;
      adimat_push1(na_rest);
      na_rest = norm(a(2 : end));
      tmpba2 = 0;
      if na>tolZ && na_rest~=0
         tmpba2 = 1;
         adimat_push1(sa1);
         sa1 = sign(real(a(1)));
         tmpba3 = 0;
         if sa1 == 0
            tmpba3 = 1;
            adimat_push1(sa1);
            sa1 = 1;
         end
         adimat_push(tmpba3, nu);
         nu = sa1 .* na;
         adimat_push1(tmplia1);
         tmplia1 = u(1) + nu;
         adimat_push_index1(u, 1);
         u(1) = tmplia1;
         adimat_push1(tmpca1);
         tmpca1 = a(1) + nu;
         adimat_push1(u);
         u = u ./ tmpca1;
         adimat_push1(tmpca1);
         tmpca1 = a(1) + nu;
         adimat_push1(sigma);
         sigma = tmpca1 ./ nu;
         adimat_push1(tmpca3);
         tmpca3 = sigma .* u;
         adimat_push1(tmpca2);
         tmpca2 = tmpca3 * u';
         adimat_push1(tmpda1);
         tmpda1 = eye(k);
         adimat_push1(Pksub);
         Pksub = tmpda1 - tmpca2;
         adimat_push1(tmpda2);
         tmpda2 = n - k + 1;
         adimat_push1(tmpda1);
         tmpda1 = n - k + 1;
         adimat_push_index2(Pk, tmpda1 : adimat_end(Pk, 1, 2), tmpda2 : adimat_end(Pk, 2, 2));
         Pk(tmpda1 : end, tmpda2 : end) = Pksub;
      end
      adimat_push1(tmpba2);
   end
   adimat_push1(tmpba1);
   nr_Pk = Pk;
   nr_u = u;
   [a_nu a_sigma a_Pksub a_tmpca2 a_na a_tmplia1 a_tmpca1 a_tmpca3 a_a] = a_zeros(nu, sigma, Pksub, tmpca2, na, tmplia1, tmpca1, tmpca3, a);
   if nargin < 3
      a_Pk = a_zeros1(Pk);
   end
   if nargin < 4
      a_u = a_zeros1(u);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         Pk = adimat_pop_index2(Pk, tmpda1 : adimat_end(Pk, 1, 2), tmpda2 : adimat_end(Pk, 2, 2));
         a_Pksub = adimat_adjsum(a_Pksub, adimat_adjred(Pksub, adimat_adjreshape(Pksub, a_Pk(tmpda1 : end, tmpda2 : end))));
         a_Pk = a_zeros_index2(a_Pk, Pk, tmpda1 : adimat_end(Pk, 1, 2), tmpda2 : adimat_end(Pk, 2, 2));
         [tmpda1 tmpda2 Pksub] = adimat_pop;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, -a_Pksub));
         a_Pksub = a_zeros1(Pksub);
         [tmpda1 tmpca2] = adimat_pop;
         a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultl(tmpca3, a_tmpca2, u'));
         a_u = adimat_adjsum(a_u, a_ctranspose(adimat_adjmultr(u', tmpca3, a_tmpca2), u));
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_sigma = adimat_adjsum(a_sigma, adimat_adjred(sigma, a_tmpca3 .* u));
         a_u = adimat_adjsum(a_u, adimat_adjred(u, sigma .* a_tmpca3));
         a_tmpca3 = a_zeros1(tmpca3);
         sigma = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_sigma ./ nu));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, -((tmpca1./nu .* a_sigma) ./ nu)));
         a_sigma = a_zeros1(sigma);
         tmpca1 = adimat_pop1;
         a_a(1) = adimat_adjsum(a_a(1), adimat_adjred(a(1), a_tmpca1));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         u = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, -((u./tmpca1 .* a_u) ./ tmpca1)));
         tmpsa1 = a_u;
         a_u = a_zeros1(u);
         a_u = adimat_adjsum(a_u, adimat_adjred(u, tmpsa1 ./ tmpca1));
         tmpca1 = adimat_pop1;
         a_a(1) = adimat_adjsum(a_a(1), adimat_adjred(a(1), a_tmpca1));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         u = adimat_pop_index1(u, 1);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_u(1))));
         a_u = a_zeros_index1(a_u, u, 1);
         tmplia1 = adimat_pop1;
         a_u(1) = adimat_adjsum(a_u(1), adimat_adjred(u(1), a_tmplia1));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         nu = adimat_pop1;
         a_na = adimat_adjsum(a_na, adimat_adjred(na, sa1 .* a_nu));
         a_nu = a_zeros1(nu);
         tmpba3 = adimat_pop1;
         if tmpba3 == 1
            sa1 = adimat_pop1;
         end
         sa1 = adimat_pop1;
      end
      [na_rest u] = adimat_pop;
      a_a = adimat_adjsum(a_a, a_u);
      a_u = a_zeros1(u);
   end
   a_a = adimat_adjsum(a_a, a_adimat_norm1(a, a_na));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_Pk));
   a_a(1) = adimat_adjsum(a_a(1), adimat_adjred(a(1), a_tmpca2 .* 0));
   assert(iscolumn(a));
end

function [Pk u] = rec_mk_householder_elim_vec_lapack(a, n)
   tmplia1 = 0;
   tmpca1 = 0;
   tmpca3 = 0;
   tmpda2 = 0;
   u = 0;
   na_rest = 0;
   sa1 = 0;
   nu = 0;
   sigma = 0;
   Pksub = 0;
   tolZ = eps;
   assert(iscolumn(a));
   tmpca2 = a(1) .* 0;
   tmpda1 = eye(n);
   Pk = tmpda1 + tmpca2;
   k = length(a);
   na = norm(a);
   tmpba1 = 0;
   if ~(k==1 && isreal(a)) && na~=0
      tmpba1 = 1;
      adimat_push1(u);
      u = a;
      adimat_push1(na_rest);
      na_rest = norm(a(2 : end));
      tmpba2 = 0;
      if na>tolZ && na_rest~=0
         tmpba2 = 1;
         adimat_push1(sa1);
         sa1 = sign(real(a(1)));
         tmpba3 = 0;
         if sa1 == 0
            tmpba3 = 1;
            adimat_push1(sa1);
            sa1 = 1;
         end
         adimat_push(tmpba3, nu);
         nu = sa1 .* na;
         adimat_push1(tmplia1);
         tmplia1 = u(1) + nu;
         adimat_push_index1(u, 1);
         u(1) = tmplia1;
         adimat_push1(tmpca1);
         tmpca1 = a(1) + nu;
         adimat_push1(u);
         u = u ./ tmpca1;
         adimat_push1(tmpca1);
         tmpca1 = a(1) + nu;
         adimat_push1(sigma);
         sigma = tmpca1 ./ nu;
         adimat_push1(tmpca3);
         tmpca3 = sigma .* u;
         adimat_push1(tmpca2);
         tmpca2 = tmpca3 * u';
         adimat_push1(tmpda1);
         tmpda1 = eye(k);
         adimat_push1(Pksub);
         Pksub = tmpda1 - tmpca2;
         adimat_push1(tmpda2);
         tmpda2 = n - k + 1;
         adimat_push1(tmpda1);
         tmpda1 = n - k + 1;
         adimat_push_index2(Pk, tmpda1 : adimat_end(Pk, 1, 2), tmpda2 : adimat_end(Pk, 2, 2));
         Pk(tmpda1 : end, tmpda2 : end) = Pksub;
      end
      adimat_push1(tmpba2);
   end
   adimat_push(tmpba1, na_rest, sa1, nu, sigma, Pksub, tolZ, tmpca2, tmpda1, k, na, tmplia1, tmpca1, tmpca3, tmpda2, Pk, u, a);
   if nargin > 1
      adimat_push1(n);
   end
   adimat_push1(nargin);
end

function a_a = ret_mk_householder_elim_vec_lapack(a_Pk, a_u)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      n = adimat_pop1;
   end
   [a u Pk tmpda2 tmpca3 tmpca1 tmplia1 na k tmpda1 tmpca2 tolZ Pksub sigma nu sa1 na_rest] = adimat_pop;
   [a_nu a_sigma a_Pksub a_tmpca2 a_na a_tmplia1 a_tmpca1 a_tmpca3 a_a] = a_zeros(nu, sigma, Pksub, tmpca2, na, tmplia1, tmpca1, tmpca3, a);
   if nargin < 1
      a_Pk = a_zeros1(Pk);
   end
   if nargin < 2
      a_u = a_zeros1(u);
   end
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      tmpba2 = adimat_pop1;
      if tmpba2 == 1
         Pk = adimat_pop_index2(Pk, tmpda1 : adimat_end(Pk, 1, 2), tmpda2 : adimat_end(Pk, 2, 2));
         a_Pksub = adimat_adjsum(a_Pksub, adimat_adjred(Pksub, adimat_adjreshape(Pksub, a_Pk(tmpda1 : end, tmpda2 : end))));
         a_Pk = a_zeros_index2(a_Pk, Pk, tmpda1 : adimat_end(Pk, 1, 2), tmpda2 : adimat_end(Pk, 2, 2));
         [tmpda1 tmpda2 Pksub] = adimat_pop;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, -a_Pksub));
         a_Pksub = a_zeros1(Pksub);
         [tmpda1 tmpca2] = adimat_pop;
         a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultl(tmpca3, a_tmpca2, u'));
         a_u = adimat_adjsum(a_u, a_ctranspose(adimat_adjmultr(u', tmpca3, a_tmpca2), u));
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_sigma = adimat_adjsum(a_sigma, adimat_adjred(sigma, a_tmpca3 .* u));
         a_u = adimat_adjsum(a_u, adimat_adjred(u, sigma .* a_tmpca3));
         a_tmpca3 = a_zeros1(tmpca3);
         sigma = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_sigma ./ nu));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, -((tmpca1./nu .* a_sigma) ./ nu)));
         a_sigma = a_zeros1(sigma);
         tmpca1 = adimat_pop1;
         a_a(1) = adimat_adjsum(a_a(1), adimat_adjred(a(1), a_tmpca1));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         u = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, -((u./tmpca1 .* a_u) ./ tmpca1)));
         tmpsa1 = a_u;
         a_u = a_zeros1(u);
         a_u = adimat_adjsum(a_u, adimat_adjred(u, tmpsa1 ./ tmpca1));
         tmpca1 = adimat_pop1;
         a_a(1) = adimat_adjsum(a_a(1), adimat_adjred(a(1), a_tmpca1));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         u = adimat_pop_index1(u, 1);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_u(1))));
         a_u = a_zeros_index1(a_u, u, 1);
         tmplia1 = adimat_pop1;
         a_u(1) = adimat_adjsum(a_u(1), adimat_adjred(u(1), a_tmplia1));
         a_nu = adimat_adjsum(a_nu, adimat_adjred(nu, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         nu = adimat_pop1;
         a_na = adimat_adjsum(a_na, adimat_adjred(na, sa1 .* a_nu));
         a_nu = a_zeros1(nu);
         tmpba3 = adimat_pop1;
         if tmpba3 == 1
            sa1 = adimat_pop1;
         end
         sa1 = adimat_pop1;
      end
      [na_rest u] = adimat_pop;
      a_a = adimat_adjsum(a_a, a_u);
      a_u = a_zeros1(u);
   end
   a_a = adimat_adjsum(a_a, a_adimat_norm1(a, a_na));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_Pk));
   a_a(1) = adimat_adjsum(a_a(1), adimat_adjred(a(1), a_tmpca2 .* 0));
   assert(iscolumn(a));
end
% $Id: mk_householder_elim_vec_lapack.m 4801 2014-10-08 12:28:59Z willkomm $
