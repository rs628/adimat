2013-06-13  Johannes Willkomm  <jw@ahorn.sc.informatik.tu-darmstadt.de>

	* Changes in Revision 3752 over Revision 3637

	* Added support for builtins: flipdim, fft, ifft, fft2, ifft2,
	fftn, ifftn

	* Added support for the parfor construct (except reductions)

	* Changes to adimat-client: Support for reconnecting, better check
	of the certificate, some new options

	* Added support for user preferences using getpref etc. at some
	places

	* The derivative container class foderivclass has been reworked:
	Performance improvements with admHessian.

	* Added support for builtins (without derivative): isrow, iscolumn, ismatrix


2013-05-10  Johannes Willkomm  <jw@ahorn.sc.informatik.tu-darmstadt.de>

	* Changes in Revision 3637 over Revision 3536

	* Added support for builtins: cross, besselj, bessely, besseli,
	besselk, besselh

	* The builtin interp1 can now also be differentiated w.r.t. the
	third argument XI and is also supported by the reverse mode.

	* admDiffFor is now able to handle the index end correctly

	* When the user code contains calls to differentiable builtin
	functions that ADiMat does not support yet, there will be an error
	message or a runtime error raised.

	* The order of results of the adimat_pop function has been
	reversed. All users of the reverse mode must update to this new
	version please.

	* Octave 3.6 supports classes, which means ADiMat can do vector
	mode using derivative classes in Octave. The AD driver functions
	have been changed to reflect that.

	* The source code of the adimat-client program has been released
	and successfully compiled on MacOS. In combination with the Linux
	version of ADiMat, this makes for a working MacOS version.

	* The ADiMat server now also listens on port 10443 for SSL
	connections, for those users who are behind a web proxy.

	* We begin a phase-in of a new properly signed SSL certificate for
	the transformation server. The client now carries both the old and
	the new certificate, so releases starting from this one should
	continue to work when we change the server's certificate in a few
	month's time.

	* An error regarding the handling of certain parameters on the
	server has been fixed.

	* Some updates to the documentation, including a new example
	section.

	* Some new utility functions:

           - admClean to delete the files generated by ADiMat
           - admAllDiffMatrix to check derivatives for correctness

2011-05-17  Johannes Willkomm  <jw642797@nb-willkomm.rz.rwth-aachen.de>

	* Revision 2913

	Fix a bug in server: add -I inputs first, then magic path -I
	@BUILTINS, this gives user functions precedence over builtins

	* Revision 2909

	This fixes the client/server problem document in tests
	interface/210 and interface/220: The transformation succeeds
	althought some functions (e.g. gamma, psi) have not yet been sent
	to the server. This is because ADiMat has builtin definitions for
	these.

	The fix is:
	- adimat dumps a list of functions in the projects
	- Server sends this list together with the results
	- Client searches for further m-file(s) with name equal to one of the functions listed and marked as builtin
	- if at least one is found, it is sent to the server and differentiation is started again

	This fix is a little ugly, because the differentiation may be done
	repeatedly, which is slow with XSLT based differentiation.

	A better fix would mean to redesign the client/server protocol
	- first present a function list to the client (OK like this?)
	- if client says OK, start differentiation


+ means new features added
- Removed something
* is a change
= is just a quote of the TODO-list

03.06.2004 (af116ve)
 * Made with-dbbuild fully functional. The program compiles now.
 * The directories for sqlite and antlr may be specified during configure.
 * dbbuiltins now enhances builtins.
 - builtins no longer parses the .amb files.
 + Basic interface to database established. ADiMat asks the database for
   identifiers. That's good!

31.05.-02.06.2004 (af116ve)
 + Added to configure.ac: Tests for sqlite, anltr, with-dbbuild (test!).
 + Added dbbuiltins, dbenvironment, dbbuiltin_func, dbbuiltin_var.

27.05.2004 (af116ve)
 + Started integration of builtindb using sqlite.

17.05.2004 (af116ve)
 * Made deletion of temporary variables switchable.

12.05.2004 (af116ve)
 * adn_load, adn_save, and and_clear_cmd are now derived from the adn_command
    class. 
 * The adn_clear_cmd now can take a set of variables to delete. This is used
    to remove no longer needed temporary variables. 

05.05.2004 (af116ve)
 =  Think about one baseclass ... for all commands. (25.09.2003) 
 * Prepared adn_command to act as a baseclass for all other commands (namely:
    adn_load, adn_save, adn_clear. adn_global is not yet derived from the
    adn_command.

23.04.2004 (af116ve)
 + Added new sparse class opt3_sp_derivclass.

28.01.2004 (af116ve)
 * Fixed brocken MIN_VERSION directive. The directive ends in an infinite
    error loop.

23.01.2004+26.01.2004-28.01.2004 (af116ve)
 + Added .amb files for all functions of the basic matlab toolbox.

09.01.2004+12.01.2004 (af116ve)
 * Updated documentation.
 * Updated README, NEWS, Changelog and TODO file.

07.01.2004+09.01.2004 (af116ve)
 + Added win_uninstall directory containing a tool which cleans up, if ADiMat
   is uninstalled from a Windows systems. 
 + Added support to adimat.iss generation procedure to Run uninstall_part2.exe
   on uninstall. 

01.01.2004 (af116ve)
 - Removed global variable for builtins (buiparser) set in adproj. The
	 builtin object is now retrived by getting from the singleton adproj.
 = Implement builtins as singleton.
 * Now the singleton adproj is used to retrieve the builtins system whereever
    needed.
 * Changed set(In)Deps() in scope to correctly set the independent and
	 dependent variables to their respective levels. This went wrong for
	 FUNCMODE. Now in FUNCMODE the variable itself is set to the activity
	 level and no longer its dependent or depends, resp. The later is still
	 needed for driver-mode.
 * Updated Makefile.am in opt3_derivclass hierarchy to install the support
	 files and class to the {app} directory on Windows.

01.12.2003-31.12.2003 (af116ve)
 * Porting to Windows. Small changes in various areas, e.g. in fmt_ofstream, util,
    mach_env,... for correct treatment of Windows \n\l (mis-)behaviour.
 + Added creation of adimat.iss.
 + Added three autoconf-scripts in the directory config:
    av_BISON_HEADERS.m4 : to add the -d flag to the bison and yacc calls to
       create the parser.h files
    av_CONDITIONAL_WIN32.m4 : to check, if we are running on Windows and
       set the automake flags correctly.
    av_CONDITIONAL_WIN32.m4 : to configure the setup-compiler.
 + Added creation of adimat.html documentation from index.sgml in the
    adimat/docs/en directory.
 + Win32: Added registry support.
 + Started updated of documentation to reflect current changes.

24.11.2003-28.11.2003 (af116ve)
 + Added functionality to call adimat with just a function-file. Needed for
    calls from Matlab. I.e., ADiMat has now direct calling support from Matlab
    using the addiff() Matlab-method.
 + Added command-line options to specify the (in-)dependent variables. This is
    only useable, if the file supplied to ADiMat is a function file. If the
    command-line options -i and -d are not specified, then all variables of the
    top-level function are treated to be the (in-) dependent variables depending
    on their occurrence in the result or argument list.

03.11.2003-05.11.2003 (af116ve)
 * The canonicalization method of the adn_assign_op now only recomputes the 
    variable dependencies when the assignment is changed.
 * Delete adn_call::params in the outline()-method only, if the current node
    represents a function call. 
 + Added getRValueamount() to adn_const, adn_ident, adn_vararg.
 * adn_list::getRValueamount() respects the number of items delivered by each
    node now. This includes the items stored in a vararg.
 * Moved map-function of the adn_statementlist into the class and made them
    private and static.
 * The vararg::forwardAD()-method now clones the activity level, too.

29.10.2003-31.10.2003 (af116ve)
 - Removed call of deleteVarSets() in adn_assign_op::outline(). The variable
    dependencies are now deleted by the collectVars()-method implicitly.
 * The adn_vararg::extendNargMapper() now respects, that the pseudo bindings
    representing the derivative objects in the bindings-array are in the
    bindings-array when computing the narg-mapper.
 * Treat an existing variable collection vector set correctly, when
    constructing the set of return variables.
 + The vararg now sets the correct differentiation level and adds a
    variable dependency node to the derivative objects added to the bindings
    array.
 * varcoll_set::unlinkDeps() now counteracts the linkDeps()-behaviour exactly
    again. This cancels a former change.
 * varcoll_vecset checking that the content of a vector is non-null before
    trying to link it.
 * Corrected varcoll_(vec)set::isEmpty() to return true if the set is empty
    and not when it contains something.
 * In visitor_base_dfs_modify::replaceWith(): moved the replace operation out
    of the #ifdef DEBUG #endif statement to replace the node even if the
    module is compiled without DEBUG-support.
    
27.10.2003-28.10.2003 (af116ve)
 * adn_assign_op::collectVars() deletes variable dependencies prior to
    recomputing the sets on both sides of the assignment.
 * adn_call::constructCT() no longer compensates the vararg(in|out) in a
    function signature. The vararg in no longer counted when building the
    func. sig.. Therefore no compensation is needed anymore.
 * Reorganized adn_list::collectVars(). The method checks for a adn_vararg
    at the beginning and utilizies the knowledge, that a adn_vararg returns
    a vector set everytime.
 - Removed adn_mrowlist::collectVars(). The base classes method is sufficient
    here.
 + The vararg is now extend to generate and store ghost bindings for the
    derivative objects of the associated items in the vararg.
 * The visitor_handle_overwriting no longer explicitly delete the variable
    dependencies. This is done be the collectVars()-method implicitly now.
 + Added isEmpty()-method to varcoll*-classes, telling if data is in the sets
    or vector sets.
 * Using C++ overloading techniques to distinguish correct methods when linking
    vector sets and sets.
    
22.10.2003-24.10.2003 (af116ve)
 + Added getLValueAmount()-method to adn_call, adn_ident, adn_paramlist.
 * Changed: Now checking it the index of a adn_call-node is non-null before
    accessing it.
 * The adn_list-class now extensively uses the map-function of its base-class
    to iterate through the list. Changed all cpp-local functions to be static
    private members of the adn_list.
 * The collectVars()-method of the adn_list-class now respects the adn_vararg.
    The result of a adn_vararg::collectVars() is a variable collect vector set.
    It is appended to the current vector set to keep the structure working.
 * Reimplemented the collectVars()-method of adn_vararg. It no longer discards
    a previously initialized variable collection, but adds the entries of the
    vararg to it.
 + Added getDerivativeName() to adn_vararg.
 * The signature now returns the list of parameters/ return identifiers including
    the item-bindings of a vararg. This caused changes in the binding, too.
 * In dynarray replaced all occurences of amount with count. Simple rename.
 * The type_function now has the same scheme in counting the number of parameters
    and returns like the signature.
 + Added appending of one varcoll_vecset to another.

21.10.2003 (af116ve)
 + Added creation of mapper arrays to map the index of the vararg(in|out) to the
    vararg-class.
 + Added integration of mapper array into the index-expression of vararg(in|out)
    expressions to the adn_vararg-class.
 + Added iteration to the vararg-class to add the mapper to the indeces of all
    adn_vararg-nodes.
 * Renamed mehtod computeMapper() to computeNargMapper() to enable distinction
    from the varargMapper.
 
20.10.2003 (af116ve)
 * The varargin now no longer occurs two times in the argument list when it is
    differentiated. This solves the problem with the errorneous naraginmapper,
    too.
 * Changed static identifiers like "0", "1", "zeros" to be static const in
    the class StringTable.
 - Removed code generating old derivative for adn_bincolon_op.
 + The adn_bincolon_op now uses the factory-method create_g_zeros() of adn_call.

15.10.2003-17.10.2003 (af116ve)
 + Added bindings-array to vararg-binding to track the binding of vararg-items.
 + Added correct bindinScope-method to adn_vararg.
 + Added active check to adn_vararg. Now checks the sub-bindings of the vararg-
    binding, too.
 + CollectActiveVars() now delivers the subbindings of an vararg and not the
    masterbinding anymore.
 + The forwardAD()-method of adn_vararg is a dirty patch currently. It simply
    duplicates the current subtree and returns this a the differentiated
    expression.
 * Changed adn_paramlist to jump to the adn_vararg::appendMapper()-method to
    computed the narg(in|out) mappers correctly.
 + Added adn_vararg::appendMapper() which adds the correct mapping entries to
    the narg(in|out) mapper depending on the ativity state of the subbindings
    in the vararg.
 * Improved vararg::allocateContents()-method. It now adds more subbindings
    to the dynarray if it is called with a number of parameters greater than
    the already allocte ones.
 + Added occurence allocation and with this correct binding of the subbindings.
 - Removed debug messages from adn_ident::~adn_ident(), when deallocating the
    destructor bickered about a missing occurence.
 * Changed bickering about missing occurenve in adn_ident::~adn_ident() to check
    if the occurence stored in the adn_ident really binds this identifier to
    a binding. With the subbindings of the vararg it may happen, that the
    occurence binds a subbinding to the vararg(in|out)-identifier. In this case
    the subbindings-occurence has to be deleted and not the master one.
 * Applied the same changes as in the adn_ident-destructor to the occurence
    destructor. It stopped bickering now, too.
 + Added support for adn_vararg in visitors.
 * Renamed dynarray::*amount members and selectors to count.
 + Added getLValueAmount() to return the correct number of expected results to:
    adn_mrowlist, adn_mitemlist, adn_matrix.
 + Added cloning of activity-level information for adj_nodes.
 
14.10.2003 (af116ve)
 + Added AST-node adn_vararg.
 + Added support to treenode-module. Now creates an adn_vararg, if a varargin
    varargout identifier is detected.
 + Added class vararg inheriting from builtin_var. Does not do much yet.
 * Changed computation for signature check. The number of return parameters
    was computed incorrectly (most of the time one!).
 * Both vararg(in|out) identifiers are now bound using the special binding
    vararg.

09.10.2003 (af116ve)
 * The iterator looping over the occurrences of the nargin-binding now uses the
    against deletion protected iterator of the list. The list is traversed
    backwards to guard nargin occurrences against a second mapping.
 - Removed the check for double occurrences in the binding list. It destroyed
    the list-iterator.
 - Removed the warning messages bickering about the use of the nargin/out 
    identifiers.
    
08.10.2003 (af116ve)
 + Added visitor_modifyExpr to the project: The visitor searches the tree for
    a subexpression and applies a function to the node matching the search
    expression. Currently only identifiers can be found. This visitor is used
    by the adn_function - mapNargin/out concept.
 + Added scan of the occurence-list of the binding of nargin. For every
    occurence the visitor modifyExpr is applied to the parent adn node of the
    occurence's identifer. This modifies the AST efficiently.
 * Implemented the visit_if_cst, _elsif_cst, _while_cst and _for_cst methods
    of the visitor_base_dfs_modify to replace the adn node of the condition or
    forvar by a new one, if requested by the visitor.
    
07.10.2003 (af116ve)
 + Added computeMapper() to the adn_paramlist.
 + Added basic support to compute and insert the nargin mapper array in the
    adn_function::AD_run()-method.

02.10.2003 (af116ve)
 * Changed adn::getGradient() to adn::getDerivativeName(), because the function
    delivered variable names with the Hessian prefix, too. The change is propagated
    to all classes, who overloaded getGratdient().
 - Removed gradient flag from binding.
 + Added a derivative level to the binding. Supplied support mehtods.
 * Changed adn_ident::getDerivativeName() to use the derivative level.
 
30.09.2003 (af116ve)
 + Added precompiler directives to mindlist::clear() to correctly disable
    use of debugging counter.
 + Added opt3_derivclass to the list of distributed files.
 - Removed opt2_derivclass and opt_derivclass from the list of distributed files.
 * Changed ADiMat_startup.m to use the opt_derivclass.
 * Changed version number to 0.2

29.09.2003 (af116ve)
 = Remove parts of the activity tree, that are on the way of an ignored
   builtin. E.g. the n in this fragment:
      [n,dumm] = size(x) ;
      N = n/2 ;
      soln = reshape(x,N,2) ;
   with x active. Example is from molecule-code. (26.09.2003)
 + Added check for ignored builtins in adn_call::collectVars(). The dependencies
    of variables of a builtin are no longer treated as if the builtin was not
    there at all, if the builtin is to be ignored. An ignored builtin now cuts
    the dependencies, i.e. it returns an empty set of variables. This is done
    only for ignored builtins! Nodiff-builtins construct the dependencies
    as if the builtin was not seen. This is needed, because some ls_*-functions
    depend on the results of former expressions, allthough these functions
    themselfes are not differentiable.
 + builtin_func::isDiffeable() now looks at the errmsg-member, too.
 * Restructured adn_call::collectVars() to avoid unnecessary computation of data.

26.09.2003 (af116ve)
 + Added visit_matrix and visit_cellarray to constfolder. Both functions
    have to delete any constant information.
    
25.09.2003 (af116ve)
 = Check if adn_adgradobj is still used. Remove if not. (18.09.2003)
 - Removed adn_adgradobj, which is not longer used.
 = Constant folding of scalar constants:
   = exponent being 0 leads to unity matrix. This needs type/shape support,
      keeping the zero exponent is therefore more feasible.
   = support for division with enumerator 1. Does not occur very often and
      is not generated by ADiMat.

24.09.2003 (af116ve)
 * If the result of the constant folding of sums is zero, then no new summand
    is added anymore.

23.09.2003 (af116ve)
 * Removed bug in visitor_constfolder:
    * Brackets were not treated correctly.
 * Item_adn::insertbefore/after() implemented. The ones of mindnode were used, which
    resulted in missing parent information.
 * Removed bug in visitor_base_dfs::visit_unary_op() did not visit its operand.
 * In scalarconstfolder: Exponents being 0 yield the identity matrix and not only 1.
    Disabled!!!
    
22.09.2003 (af116ve)
 * Debugged visitor_constfolder. Now mimics visitor_base_dfs_modify-behaviour in
    valuate_Operands().
 + Added postUdpate()-method to visitor_constfolder telling where the constant
    was folded.
 + Added support for folding of exponents equal to one or zero.
 + Added folding of products with one factor being one or zero. 

19.09.2003 (af116ve)
 + Thorougly implemented and tested visitor_base_dfs_modify.
 - Removed setparent()-calls at several places. This is now done by the adn_list
    append/insert-methods.
 * Started redesign of visitor_constfolder. Uses visitor_base_dfs_modify now.
    But is errorneous currently.
 + Added preUpdate() and postUpdate()-entry points to enable actions directly
    before the AST is changed and afterwards.

18.09.2003 (af116ve)
 * Propagated change of mindlist::append and insert-methods to all other classes,
    esp. to adn_list.
 = implement base visitor with operand changing: (11.08.2003)
   = Each node using operands checks, if the accept-call for the operand
     lead to a new operand, which replaces to current one.
   = The visitor uses a base_dfs-like way to walk the tree.
 + Added visitor_base_dfs_modify with update, insert before current, insert after
    current statemente, add to current statementlist at the beginning/end, add to
    primary statementlist at the beginning/end.

17.09.2003 (af116ve)
 + Redesign insert and append methods of class mindlist.
 + Skeleton of visitor_base_dfs_modify created.

12.09.2003 (af116ve)
 = In dynamic structref: If the ref is an index, the code will not get parsed
  and unparsed correctly. (11.09.2003)
 - Removed adn_structrefdyn-class, because the implementation was insufficient.
 + Added adn_dynstructref-class, which is a bit like the adn_call-class. The class
    is only partially implemented, because the feature of dynamic structure
    referencing is not that popular and therefore seldom used.
 = Examine if binding::active is still needed (13.08.2003)
    - Removed it.
    - Removed builtin_func:setActiv(), because no one called this function anymore.
    * Changed binding::setActive() to create an adjn node and set the activity
       value to 3 (full active).

10.09-11.09.2003 (af116ve)
 + Added documentation for new commandline options and directives. (11.09.2003)
 = Add documentation for the opt3-derivclass. (08.09.2003)
   + Explained secondorder derivative-objects. (done, 10.09.2003)
   + The new constructors. (done, 10.09.2003)
   + The options system. (done, 10.09.2003)
   + The treatment of cellarrays in conjunction with derivative objects. 
   + How structures are treated.
 + Added description of the use of 'ADiMat_internal.amb' to the documentation.

09.09.-10.09.2003 (af116ve)
 = Change to MATLAB 6p5 (R13) standart of the MATLAB-language. (02.09.2003)
   Most significantly:
   = Add support for && and || operators.
   = Add support for dynamic field names: struct.(compname)
 - Removed adn_and_op and adn_or_op.
 + Added adn_logical_op to store &, |, &&, and ||.
 + Added adn_structref_dyn to store dynamic field names. 

04.09.2003 (af116ve)
 = If structure-assignment, then create the deriv-object before use. If not done
   this way the derivative will be stored in the structure-member and not the
   structure in the derivative object. (02.09.2003)
   + Added method in adn_function, which does a basic analysis. For all structures
     that get an assignment in the form of str.field =... in the body of the function
     a call to g_str= g_dummy or h_str= h_dummy is generated.
 * Removed a bug in adn_assign_op::forwardAD(). Due to restructuring of the method
   a variable was overwriten by a local one. This lead to loss of the information
   assigned to the local one. Fixed.
   

03.09.2003 (af116ve)
 = Debug: Specifying unknown directive leads to endless loop. (27.08.2003)
    * Moved error-terminal in directive parser to catch errors from line_NL-
       non-terminal to line-non-terminal.

25.07.2003-02.09.2003 (af116ve)
 = Computing Hessians needs support in @adgradobj. (15.08.2003)
    = Use opt2_derivclass to work with Hessians.
    = Rename adgradobj to adderivobj.
    = Support more dimensional adderivobj i.e. Hessians by storing them in
       {n,n}-matrices and no longer in {n}{n}.
    = Create Hessian constructors.
    = Remove createEmptyGradients-constructor.
 + All of the above and much more is now added. See ${ADIMAT_SRC}/opt3_derivclass/Readme.txt
    for a detailed description.

02.09.2003 (af116ve)
 - Removed forvar node from parser. The node was useless, because MATLAB does not
   support iterating over structures. This was left over from the Octave implementation.
   
27.08.2003 (af116ve)
 * adn_call::forward_AD() now respects the special MATLAB-constructor g_zeros() when
   analysing builtin-functions in second-order derivative mode.
   
13.08.2003 (af116ve)
 = Debug: Constant folder does not recognize all formats of numbers, hangs! (12.08.2003)
 * Assumption is wrong: The visitor_base_dfs had an endless loop in visit_cell_index(). Corrected.
 = Debug: 2ndorderfwdmode does not work with Canales-example. Segfaults (12.08.2003)
 * extendVarGradParamList() encountered empty entries because an initialized adjn-Node
   overpowered the active flag. Now activity state is stored in the adjn_node only.
   -> Remove active-flag in future versions.
   
08.08.2003 (af116ve)
 - Removed adn_add_op / adn_sub_op.
 * Changed visitor_scalarconstfolder to use adn_sum_op.
 * adn_sum_op now sets the number of operators correctly.

07.08.2003 (af116ve)
 + Glued adn_add_op and adn_sub_op together to one adn_sum_op.
   * Changed treenode to use the new node type.
   * Changed forward_AD-methods to use adn_sum_op.
   + Implemented genuine compress-method.
   - Removed adn_add/sub_op from common visitors.
   + Added support for adn_sum_op in base_visitors.
 - Improved old adn_bin_op::compress, which was losing nodes under certain circumstances.
 
06.08.2003 (af116ve)
 + Basic scalar folding implemented.

22.07.2003 (af116ve) adimat version 0.1
 - Started changelog.

 vim:tw=78:ft=changelog:ts=3:
 
